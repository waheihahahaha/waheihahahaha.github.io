{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/yilia/source/main.0cf68a.css","path":"main.0cf68a.css","modified":0,"renderable":1},{"_id":"themes/yilia/source/slider.e37972.js","path":"slider.e37972.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/main.0cf68a.js","path":"main.0cf68a.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/mobile.992cbe.js","path":"mobile.992cbe.js","modified":0,"renderable":1},{"_id":"themes/yilia/source/assets/网页图标.jpg","path":"assets/网页图标.jpg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","path":"fonts/default-skin.b257fa.svg","modified":0,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","path":"fonts/iconfont.16acc2.ttf","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","path":"fonts/iconfont.45d7ee.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","path":"fonts/iconfont.8c627f.woff","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","path":"fonts/iconfont.b322fa.eot","modified":1,"renderable":1},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","path":"fonts/tooltip.4004ff.svg","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/default-skin.png","path":"img/default-skin.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/preloader.gif","path":"img/preloader.gif","modified":1,"renderable":1},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","path":"img/scrollbar_arrow.png","modified":1,"renderable":1},{"_id":"themes/yilia/source/assets/微信与支付宝.jpg","path":"assets/微信与支付宝.jpg","modified":1,"renderable":1},{"_id":"themes/yilia/source/assets/头像.jpg","path":"assets/头像.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/yilia/.babelrc","hash":"b1b76475ac17dc9e2fa50af96c9e31eea2d0f2b4","modified":1554435271263},{"_id":"themes/yilia/.eslintignore","hash":"df0a50b13cc00acb749226fee3cee6e0351fb1d9","modified":1554435271263},{"_id":"themes/yilia/.editorconfig","hash":"da6d022b8f4d9c961e2f8f80677e92af8de0db4d","modified":1554435271263},{"_id":"themes/yilia/.eslintrc.js","hash":"5696ae049de010ed3786768b0c359f14c05b5ec6","modified":1554435271263},{"_id":"themes/yilia/.gitattributes","hash":"e0f24dceeb1e6878a1dd9b01a2b9df1bc037a867","modified":1554435271263},{"_id":"themes/yilia/README.md","hash":"1bf755806af9d8874bd22e1abbdaaa24328ef4dc","modified":1554435271263},{"_id":"themes/yilia/_config.yml","hash":"3a90fb4f279fc5035e6d985a3698eb2f20deec31","modified":1554435271263},{"_id":"themes/yilia/package.json","hash":"367cb9579d35968a942c243ab248a5f5ebfaf462","modified":1554435271267},{"_id":"themes/yilia/webpack.config.js","hash":"05ba46a4ae744272f5312e684928910dccad3755","modified":1554435271271},{"_id":"source/_posts/ubuntu 系统下 github pages 个人博客搭建 -- hexo.md","hash":"41b6dad2f1c4687cefe1b76ea04d39e3fabcfcc2","modified":1554435271263},{"_id":"source/_posts/使用 github pages 和 hexo 搭建个人博客 .md","hash":"7ea271311318184633a7c5a11667d9244767e616","modified":1555147351395},{"_id":"source/categories/index.md","hash":"452aab920307aa14dcee6d5ba204cbded9878127","modified":1554435271263},{"_id":"source/tags/index.md","hash":"a73c3e84f2b074d1ef9c4ca054ac3ce50e7e2df0","modified":1554435271263},{"_id":"themes/yilia/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1554435271263},{"_id":"themes/yilia/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1554435271263},{"_id":"themes/yilia/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1554435271263},{"_id":"themes/yilia/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1554435271263},{"_id":"themes/yilia/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1554435271263},{"_id":"themes/yilia/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1554435271263},{"_id":"themes/yilia/languages/zh-tw.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1554435271263},{"_id":"themes/yilia/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1554435271267},{"_id":"themes/yilia/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1554435271267},{"_id":"themes/yilia/layout/index.ejs","hash":"a35dc900203f9d8dd863ea4c1722198d6d457ec8","modified":1554435271267},{"_id":"themes/yilia/layout/layout.ejs","hash":"0a332bdbd3b86c231d690614687f5b97186b85d5","modified":1554435271267},{"_id":"themes/yilia/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1554435271267},{"_id":"themes/yilia/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1554435271267},{"_id":"themes/yilia/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1554435271267},{"_id":"themes/yilia/source/main.0cf68a.css","hash":"f925326453364f2c407072ba223ff078b63f298e","modified":1554435271267},{"_id":"themes/yilia/source/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1554435271271},{"_id":"themes/yilia/source-src/css.ejs","hash":"94dbdb02ca11849e415d54fb28546a598f2cffb1","modified":1554435271267},{"_id":"themes/yilia/source-src/script.ejs","hash":"c21381e1317db7bb157f1d182b8c088cb7cba411","modified":1554435271267},{"_id":"themes/yilia/layout/_partial/toc.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554435271263},{"_id":"themes/yilia/source/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1554435271267},{"_id":"themes/yilia/source/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1554435271267},{"_id":"themes/yilia/layout/_partial/.~lock.article.ejs#","hash":"e73c676a7900dbc917c09a71f4d18d1ef08279fe","modified":1554435271263},{"_id":"themes/yilia/layout/_partial/after-footer.ejs","hash":"b86b248720ad415ec1b5fee53fb583776c776f83","modified":1554435271263},{"_id":"themes/yilia/layout/_partial/archive-post.ejs","hash":"1f7d4819b7f67602c4a1b99871808d2160b60978","modified":1554435271263},{"_id":"themes/yilia/layout/_partial/archive.ejs","hash":"a6e94061ac55b9eb55275f87b608d62f6ea35659","modified":1554435271263},{"_id":"themes/yilia/layout/_partial/article.ejs","hash":"83edf17a3973a0242684cc9d5a7c3e390e5d2029","modified":1554435271263},{"_id":"themes/yilia/layout/_partial/aside.ejs","hash":"8edbd7993b9b061611a193533a664e2e85eae748","modified":1554435271263},{"_id":"themes/yilia/layout/_partial/baidu-analytics.ejs","hash":"f0e6e88f9f7eb08b8fe51449a8a3016273507924","modified":1554435271263},{"_id":"themes/yilia/layout/_partial/css.ejs","hash":"236f8a377b2e4e35754319c3029bcd4a4115431d","modified":1554435271263},{"_id":"themes/yilia/layout/_partial/footer.ejs","hash":"f2994e0acd1d606ebf4680afc4fa652e148ccf4e","modified":1554435271263},{"_id":"themes/yilia/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1554435271263},{"_id":"themes/yilia/layout/_partial/head.ejs","hash":"64f092186b5a744aa1603ce22bb1d44a34446add","modified":1554435271263},{"_id":"themes/yilia/layout/_partial/header.ejs","hash":"6387a93dad7c3d778eb91e3821852fbf6813880c","modified":1554435271263},{"_id":"themes/yilia/layout/_partial/left-col.ejs","hash":"183d7ca4ba8e7c80694ffdc8cf39957092238346","modified":1554435271263},{"_id":"themes/yilia/layout/_partial/mathjax.ejs","hash":"151a1ef2173ba7b6789d349f0f8da89616cc1394","modified":1554435271263},{"_id":"themes/yilia/layout/_partial/mobile-nav.ejs","hash":"7fbbfabf5e29525b24ada14613c21a26789132b4","modified":1554435271263},{"_id":"themes/yilia/layout/_partial/tools.ejs","hash":"c41341b9618e591538e1136a2d1637587c1bbd90","modified":1554435271263},{"_id":"themes/yilia/layout/_partial/viewer.ejs","hash":"e495790b2abe2290875817e42bd505bc611d3e26","modified":1554435271267},{"_id":"themes/yilia/source/assets/网页图标.jpg","hash":"a00e0d50b64fb53e7c4d38fbc7f9574d7769d1c2","modified":1554435271267},{"_id":"themes/yilia/source/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1554435271267},{"_id":"themes/yilia/source/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1554435271267},{"_id":"themes/yilia/source/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1554435271267},{"_id":"themes/yilia/source/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1554435271267},{"_id":"themes/yilia/source/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1554435271267},{"_id":"themes/yilia/source/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1554435271267},{"_id":"themes/yilia/source/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1554435271267},{"_id":"themes/yilia/source/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1554435271267},{"_id":"themes/yilia/source/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1554435271267},{"_id":"themes/yilia/source-src/css/_core.scss","hash":"24f347a2412abbf58318369152504da9538f8d3b","modified":1554435271267},{"_id":"themes/yilia/source-src/css/_function.scss","hash":"93a50dd19a93485712da1f8d0a1672482dd1eabc","modified":1554435271267},{"_id":"themes/yilia/source-src/css/archive.scss","hash":"7d27e22ac898e8fafec14549e940c73cbea1fba8","modified":1554435271267},{"_id":"themes/yilia/source-src/css/article-inner.scss","hash":"d79f2d35a06de83a2a226ca790b7a0a34789c115","modified":1554435271267},{"_id":"themes/yilia/source-src/css/article-main.scss","hash":"3fad68bd74260326f83090b0974dd80707e7bac7","modified":1554435271267},{"_id":"themes/yilia/source-src/css/article-nav.scss","hash":"43e507f2a48504079afd9471353337e23ca47470","modified":1554435271267},{"_id":"themes/yilia/source-src/css/article.scss","hash":"0f6d61af99ed4db87f8589db1feaea7747b55963","modified":1554435271267},{"_id":"themes/yilia/source-src/css/aside.scss","hash":"578a67464dd0f542197f7fcee158c991db058563","modified":1554435271267},{"_id":"themes/yilia/source-src/css/comment.scss","hash":"cafe3834017a3bf47420f37543725025225a2c89","modified":1554435271267},{"_id":"themes/yilia/source-src/css/fonts.scss","hash":"97b8fba41c914145710b90091f400b845879577f","modified":1554435271267},{"_id":"themes/yilia/source-src/css/footer.scss","hash":"7c995410b25baaf61dfc5e148e22ca60330abcd3","modified":1554435271267},{"_id":"themes/yilia/source-src/css/global.scss","hash":"b4cb4f45a55d4250cd9056f76dab2a3c0dabcec4","modified":1554435271267},{"_id":"themes/yilia/source-src/css/grid.scss","hash":"849a29fcd7150214fcf7b9715fa5dc71d1f9b896","modified":1554435271267},{"_id":"themes/yilia/source-src/css/highlight.scss","hash":"3719994c2c9393813cc1d42b657205c368a329cb","modified":1554435271267},{"_id":"themes/yilia/source-src/css/left.scss","hash":"0d30c0e7cdb831c3881a017006c782f2214ac195","modified":1554435271267},{"_id":"themes/yilia/source-src/css/main.scss","hash":"2f86a014af93583caba78a563d9549826bf28294","modified":1554435271267},{"_id":"themes/yilia/source-src/css/mobile-slider.scss","hash":"f053c609d84df0dd9eee1d11ddf0c19163a456be","modified":1554435271267},{"_id":"themes/yilia/source-src/css/mobile.scss","hash":"ace041d72f95b419f6a5e443191703c2b62007f4","modified":1554435271267},{"_id":"themes/yilia/source-src/css/page.scss","hash":"bf206bb7f7d0967bc8b7fdf01b7ffc99aff9ba88","modified":1554435271267},{"_id":"themes/yilia/source-src/css/reward.scss","hash":"80a4fcf9171d4a33235da96ac8a2b7dcabc45dfb","modified":1554435271267},{"_id":"themes/yilia/source-src/css/scroll.scss","hash":"9c8dfd1c76854ef063494ca76fac6360b391ed6d","modified":1554435271267},{"_id":"themes/yilia/source-src/css/share.scss","hash":"150c6425f6582e7ec78a873256ce49c9930e8805","modified":1554435271267},{"_id":"themes/yilia/source-src/css/social.scss","hash":"724162ccf3977e70a45d189abfaa20b6e2fba87b","modified":1554435271267},{"_id":"themes/yilia/source-src/css/tags-cloud.scss","hash":"c8aa84fca93862d3caae77c552873b8610f33327","modified":1554435271267},{"_id":"themes/yilia/source-src/css/tags.scss","hash":"ac67a3c7097849206244db9b0ba91daaba017ef5","modified":1554435271267},{"_id":"themes/yilia/source-src/css/tools.scss","hash":"1b1aa0908e58cf942b28e3881d07c5573c4129e1","modified":1554435271267},{"_id":"themes/yilia/source-src/css/tooltip.scss","hash":"53d5a554bc2f38e9bb3d26400a47767013c05216","modified":1554435271267},{"_id":"themes/yilia/source-src/js/Q.js","hash":"d011af172064b6c6e0c7051d8f9879373ddac113","modified":1554435271267},{"_id":"themes/yilia/source-src/js/anm.js","hash":"4a4c5d82b09a3063f91a434388e6aa064fd7fd98","modified":1554435271267},{"_id":"themes/yilia/source-src/js/aside.js","hash":"754f771264548a6c5a8ad842908e59ae4e7ed099","modified":1554435271267},{"_id":"themes/yilia/source-src/js/browser.js","hash":"04095b38cfd4316a23f8eb14b1ffaf95f78a4260","modified":1554435271267},{"_id":"themes/yilia/source-src/js/fix.js","hash":"d6782d53c992e712af39c84e804eccaf38830b94","modified":1554435271267},{"_id":"themes/yilia/source-src/js/main.js","hash":"3894e60827c817319e43c9ff3ed045fc3d7336ce","modified":1554435271267},{"_id":"themes/yilia/source-src/js/mobile.js","hash":"4d823b039fd296d24a454eae5a798b93c44560cb","modified":1554435271267},{"_id":"themes/yilia/source-src/js/report.js","hash":"4f1d9a18a936ce40b037f636a39127dd19175b6e","modified":1554435271267},{"_id":"themes/yilia/source-src/js/share.js","hash":"b090f82cf80cba7da764753906d9e2cc2acdf30d","modified":1554435271267},{"_id":"themes/yilia/source-src/js/slider.js","hash":"e846bcc5aac9c68b93f7b8de353df54d8d29f666","modified":1554435271267},{"_id":"themes/yilia/source-src/js/util.js","hash":"8456e9d6b19532742582c99b2fb9d09e146e1c58","modified":1554435271267},{"_id":"themes/yilia/source-src/js/viewer.js","hash":"2577deb6a9fe4f5436360b2ce9afcc7f9a7f0116","modified":1554435271267},{"_id":"themes/yilia/layout/_partial/script.ejs","hash":"4cb685f07e89dd5175c2a576e73a1a957aec5637","modified":1554435271263},{"_id":"themes/yilia/source/assets/微信与支付宝.jpg","hash":"008783f7996a559e606d9425920fc96889ff0d14","modified":1554435271267},{"_id":"themes/yilia/layout/_partial/post/category.ejs","hash":"0809a4829aabeb4e911a3ed04ec28db4df7dfe3f","modified":1554435271263},{"_id":"themes/yilia/layout/_partial/post/changyan.ejs","hash":"5f99b55980da64a723a8e14d5a7daba0d6504647","modified":1554435271263},{"_id":"themes/yilia/layout/_partial/post/date.ejs","hash":"ef71c4081e866a494367575c59610e7e6339ece0","modified":1554435271263},{"_id":"themes/yilia/layout/_partial/post/duoshuo.ejs","hash":"e8399025ed3b980aedb821c92855889f5f12fd5b","modified":1554435271263},{"_id":"themes/yilia/layout/_partial/post/gitment.ejs","hash":"e68bbac9ffb1ad27b56837c9abad6ed6bb7daa0c","modified":1554435271263},{"_id":"themes/yilia/layout/_partial/post/nav.ejs","hash":"1036c8e4e1a7bc935ba173744da735a0d6ed09cd","modified":1554435271263},{"_id":"themes/yilia/layout/_partial/post/share.ejs","hash":"5dccfbe165b23a101f1333cc65ed8efbd197453c","modified":1554435271263},{"_id":"themes/yilia/layout/_partial/post/tag.ejs","hash":"2e783e68755abb852760eb0e627a3fbb50a05a55","modified":1554435271263},{"_id":"themes/yilia/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1554435271263},{"_id":"themes/yilia/layout/_partial/post/wangyiyun.ejs","hash":"ea41c462168d9697caef9485862e9cac718a12c1","modified":1554435271263},{"_id":"themes/yilia/source/assets/头像.jpg","hash":"e453d768037b6b82478d1d45a7393404aafa86f7","modified":1554435271267},{"_id":"themes/yilia/source-src/css/core/_animation.scss","hash":"63a37f26276f9207405afe0f2d65339ce295bbaf","modified":1554435271267},{"_id":"themes/yilia/source-src/css/core/_media-queries.scss","hash":"491ab3378d5c11005ba65c607608bb36b368a9d5","modified":1554435271267},{"_id":"themes/yilia/source-src/css/core/_mixin.scss","hash":"3bba5c77bad5981eac859fe05c9561d580ba7fa9","modified":1554435271267},{"_id":"themes/yilia/source-src/css/core/_reset.scss","hash":"fab871fa93bd542e76a71a56428f2994a4aaf443","modified":1554435271267},{"_id":"themes/yilia/source-src/css/core/_variables.scss","hash":"fb511c505d1309249f21dc577d4ad2bad99a764f","modified":1554435271267},{"_id":"themes/yilia/source-src/css/fonts/iconfont.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1554435271267},{"_id":"themes/yilia/source-src/css/fonts/iconfont.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1554435271267},{"_id":"themes/yilia/source-src/css/fonts/iconfont.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1554435271267},{"_id":"themes/yilia/source-src/css/fonts/iconfont.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1554435271267},{"_id":"themes/yilia/source-src/css/img/checkered-pattern.png","hash":"049262fa0886989d750637b264bed34ab51c23c8","modified":1554435271267},{"_id":"themes/yilia/source-src/css/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1554435271267},{"_id":"themes/yilia/source-src/css/img/tooltip.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1554435271267},{"_id":"public/content.json","hash":"877474d490a8e3c4d60ef1ac67fce97ae066a53c","modified":1555147384059},{"_id":"public/categories/index.html","hash":"9160b84ffaa9306ca4f9ba45def878a65399fceb","modified":1555147384277},{"_id":"public/tags/index.html","hash":"397833c70504c6e979c0e73f0e39b4ec9ccfa5e4","modified":1555147384277},{"_id":"public/2019/03/27/使用 github pages 和 hexo 搭建个人博客 /index.html","hash":"2f6c686b280dfdd49c528b0d90ec1df422ce3e4f","modified":1555147384277},{"_id":"public/2019/03/22/ubuntu 系统下 github pages 个人博客搭建 -- hexo/index.html","hash":"76e9290ab6930740f9814008490651e1834c1ad8","modified":1555147384277},{"_id":"public/archives/index.html","hash":"0de0185aba12ed374ac3ac4a095ae61a5061fe41","modified":1555147384277},{"_id":"public/archives/2019/index.html","hash":"acda9141d409964630ad36c07788bfaf27a8aa25","modified":1555147384277},{"_id":"public/archives/2019/03/index.html","hash":"841eb22230e8ae78fe6291bbac1fd045bcec65ad","modified":1555147384277},{"_id":"public/index.html","hash":"f29bcd615fab35e111c822825d298cbb735cef05","modified":1555147384277},{"_id":"public/tags/hexo/index.html","hash":"25029d1d3c3c2943a158981d51328a7d1f511661","modified":1555147384277},{"_id":"public/tags/blog/index.html","hash":"2e0199ffee1e2715fd842164f4bd5ec5311df03a","modified":1555147384277},{"_id":"public/categories/blog/index.html","hash":"64e4f577772fa972c8e6fda7bc803b121017a94c","modified":1555147384277},{"_id":"public/assets/网页图标.jpg","hash":"a00e0d50b64fb53e7c4d38fbc7f9574d7769d1c2","modified":1555147384279},{"_id":"public/fonts/default-skin.b257fa.svg","hash":"2ac727c9e092331d35cce95af209ccfac6d4c7c7","modified":1555147384279},{"_id":"public/fonts/iconfont.16acc2.ttf","hash":"f342ac8bf4d937f42a7d6a0032ad267ab47eb7f2","modified":1555147384279},{"_id":"public/fonts/iconfont.45d7ee.svg","hash":"f9304e5714d20861be7d8f4d36687e88e86b9e1b","modified":1555147384279},{"_id":"public/fonts/iconfont.8c627f.woff","hash":"aa9672cb097f7fd73ae5a03bcd3d9d726935bc0a","modified":1555147384280},{"_id":"public/fonts/iconfont.b322fa.eot","hash":"bc8c5e88f4994a852041b4d83f126d9c4d419b4a","modified":1555147384280},{"_id":"public/fonts/tooltip.4004ff.svg","hash":"397fe4b1093bf9b62457dac48aa15dac06b54a3c","modified":1555147384280},{"_id":"public/img/preloader.gif","hash":"6342367c93c82da1b9c620e97c84a389cc43d96d","modified":1555147384280},{"_id":"public/img/default-skin.png","hash":"ed95a8e40a2c3478c5915376acb8e5f33677f24d","modified":1555147384280},{"_id":"public/img/scrollbar_arrow.png","hash":"d64a33c4ddfbdb89deeb6f4e3d36eb84dc4777c0","modified":1555147384280},{"_id":"public/assets/微信与支付宝.jpg","hash":"008783f7996a559e606d9425920fc96889ff0d14","modified":1555147384282},{"_id":"public/assets/头像.jpg","hash":"e453d768037b6b82478d1d45a7393404aafa86f7","modified":1555147384283},{"_id":"public/slider.e37972.js","hash":"6dec4e220c89049037eebc44404abd8455d22ad7","modified":1555147384286},{"_id":"public/main.0cf68a.css","hash":"85a43792c3a9833a1a1e34f70436849ca951f196","modified":1555147384286},{"_id":"public/main.0cf68a.js","hash":"993fadeb5f6d296e9d997a49ee20dc97333ceab7","modified":1555147384287},{"_id":"public/mobile.992cbe.js","hash":"01b35e71e37aa2849664eb5daf26daede2278398","modified":1555147384288}],"Category":[{"name":"blog","_id":"cjufall3i00046tt01nh9mxx5"}],"Data":[],"Page":[{"title":"categories","date":"2019-03-22T11:23:50.000Z","typw":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-03-22 19:23:50\ntypw: \"categories\"\n---\n","updated":"2019-04-05T03:34:31.263Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjufall3100006tt0jdselv3s","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-03-22T11:22:34.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-03-22 19:22:34\n---\n","updated":"2019-04-05T03:34:31.263Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjufall3g00026tt00250qrpb","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"ubuntu 系统下 github pages 个人博客搭建 -- hexo","date":"2019-03-22T09:36:00.000Z","comments":1,"toc":true,"_content":"\n\n\n用 hexo 搭建个人博客 \n<!-- more -->\n\n# 前言\n之前往 github 上提交过东西，自认为写的是个人博客，直到后来听他们说起 github pages ，才发现自己提交到了 repository ，出糗了，尴尬...\n\n\n不管是对于大牛还是对于新手，写博客都是个好习惯。大牛可以洋洋洒洒把一项技术描述的淋漓尽致，虽然我做不到那样，但可以把自己在学习中遇到的问题和解决的办法记录下来，一则积累经验，二则若能帮到其他网友那真是万幸，望能坚持，若指正错误必感激涕零。\n\n# 写作平台对比\n目前来说，我比较了解的博客平台：博客园、CSDN 和 github pages。\n\n其他平台，不甚了解，不妄加评论，以后补充。\n\n这三个平台，个人比较喜欢 CSDN 和 github pages 。博客园感觉界面有点 low ，虽然本人长相一般，但稍稍有点颜控，so...  丑拒。毕竟现在来说，哪个平台的功能都差不多，起码没有哪家能做到一家独大，看着心情舒畅比较重要嘛。\n\nCSDN 和 github pages 感觉都差不多，CSDN 的 SEO 做的好，在百度或者 Google 搜索时比较靠前，阅读量会比较高，从追求阅读量来说是一个不错的选择，广告多的有些过分，界面说不上好吧，不过比博客园强多了。gayhub ？哦不对，是 github ，百度是搜不着的，阅读量自然就 emm... ，不过是一个可以向全世界的程序猿展示自己的平台，逼格较高。相对而言，我还是较为喜欢 github 吧 。\n\n# 搭建准备\ngit 和 node.js 是必须的准备工作，也是入门必备，若是版本较高的 ubuntu 系统，可以使用较为简单的命令行安装，傻瓜式操作，不过一般给下载的都是最新版本，系统较老或者追求稳定版本的可以去官网自行下载解压安装。虽然听说最新版本使用不稳定，但目前来看好像并没有遇到过这种问题，用起来都一样。不过不要像我一样，命令行安装过 node，又从官网下载安装，结果导致当前管理员和超级用户使用的都不是一个版本，当前管理员安装了 node.js 和 npm ，超级用户只有 node.js 却没有 npm ，后来用的时候老报错误，还不明白怎么改，捣鼓了半天，只能卸载重新安装。\n\n温馨提醒，尽量不要在 root 权限下执行操作，容易搞蹦系统。\n##  git 介绍\n向自己的 github 上传文件，是需要一点 git 基础的，不懂也没有关系，只需要掌握一些基本操作命令就好了。\n\n可参考廖雪峰老师的 git  教程：[ git 基础学习](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/)\n\n## git 安装\n打开终端（ 桌面右键 open Terminal 或者 Ctrl + Alt + T ）\n\n输入 git ，查看系统是否已经安装   git\n\n```javascript\n// An highlighted block \n $ git\n```\n已安装，则跳过此步骤，若提示`The program 'git' is currently not installed. You can install it by typing:\nsudo apt-get install git`，则执行命令：\n\n```javascript\n// An highlighted block \n $ sudo apt-get install git\n```\n若系统版本较老，可先从Git官网下载源码：[ git 官网](https://git-scm.com/)\n解压后，依次执行命令：`./config`，`make`，`sudo make install`\n\n配置个人信息，设置user name 与 email\n\n```javascript\n// An highlighted block \n $ git config --global user.name \"github用户名\"\n $ git config --global user.email \"你注册的邮箱地址\"\n```\n\n## node.js 介绍\n可参考廖雪峰老师的 node.js 教程：[ node.js 基础学习 ](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143450141843488beddae2a1044cab5acb5125baf0882000)\n\n## node.js 安装\n打开终端（ 桌面右键 open Terminal 或者 Ctrl + Alt + T ）\n\n输入 node -v ，查看系统是否已经安装   node\n\n```javascript\n// An highlighted block \n $ node -v\n```\n已安装，则跳过此步骤；若未安装：\n\n法一：  apt-get 命令安装\n\n```javascript\n// An highlighted block \n  $ sudo apt-get install nodejs\n  $ sudo apt-get install npm\n```\n**法二**： *第一步*  下载 nodejs 包，node.js 官网下载安装：[ node.js 官网 ](https://nodejs.org/en/)\n\n或\n\n```javascript\n// An highlighted block \n $ wget https://nodejs.org/dist/v10.11.0/node-v10.11.0-linux-x64.tar.xz   //下载\n $ tar xf  node-v10.11.0-linux-x64.tar.xz       // 解压\n $ cd node-v10.11.0-linux-x64/                  // 进入解压目录\n $ ./bin/node -v                               // 执行node命令 查看版本\n```\n*第二步*   创建软连接，环境变量配置，当前管理员   与  超级用户下都可执行 npm 与 node \n\n```javascript\n// An highlighted block \n  $ ln -s  /home/root/node-v10.11.0-linux-x64/bin/node  /usr/local/bin/\n  $ ln -s /home/root/node-v10.11.0-linux-x64/bin/npm  /usr/local/bin/\n```\n注意：要写文件的绝对路径\n举例：我的电脑创建软连接的实际代码如下\n\n```\nsudo ln -s /home/wahahaha/.nvm/versions/node/v11.12.0/bin/node /usr/local/bin/\nsudo ln -s /home/wahahaha/.nvm/versions/node/v11.12.0/bin/npm /usr/local/bin/\n```\n电脑中 node 和 npm 的路径如下 ==>\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190320202534963.png)\n\n查看是否安装到全局：`sudo node -v`，`sudo npm -v`\n\n# 博客框架搭建\n在框架搭建的时候，一般给推荐 jekyll 和 hexo 两种。刚开始还挺纠结，选择困难症这可咋办啊，就去网上看看他们各自的优缺点吧。结果发现全是捧 hexo 贬 jekyll 的，那感觉 jekyll 在 hexo 面前一文不值，根本不用纠结的好嘛，果断选择 hexo。也确实好用：依赖少，使用方便，色调较柔和，生成静态站点速度快 ... 当你完成本地博客的搭建，并成功用浏览器打开时，你已经离成功只有一步之遥了。\n\n\n## hexo 的介绍与安装\n\nhexo 是一个博客框架，拥有众多博客主题\n\n安装：\n\n\n```javascript\n// An highlighted block\n  $ npm install -g hexo-cli\n```\n开始建站：\n\n```javascript\n// An highlighted block\n $ hexo init <folder>\n $ cd <folder>\n $ npm install\n```\n\n<folder>  文件夹名称随意，初始化 Hexo 。\n生成静态文件命令：`hexo generate`\n启动服务器命令：`hexo server`\n\n现在，Hexo 本地博客已经搭建好了，可以用浏览器打开网址：[ http://localhost:4000/](http://localhost:4000/)  进行预览。\n\n# 将本地博客部署到 github\n\n首先，需要注册一个 github  的账号，就像注册一个 QQ 号那样简单，不过由于网页是纯英文的，对于英文不太好的伙伴看起来可能有点费力，不过并不难。然后，需要创建一个你自己的仓库 repositories，且仓库名必须是用户名后面加上`.github.io`，否则不会被识别。\n远程连接服务器时，需要 SSH 协议将本地与远程连接服务器时，需要 SSH 协议将本地与远程服务器进行连接，生成的两个文件一个为公钥(id_rsa)一个为私钥(id_rsa.pub)，我们需要把公钥配置到 github 的 SSH 上，当我们与远程连接时，公钥会与私钥相匹配。Deployment 配置是为了 hexo 命令能与用户的 github 对接。\n## 账号注册及SSH配置\n第一步： github 账号注册，地址：[https://github.com/](https://github.com/)\n\n第二步：注册登录后，创建一个新的repositories，且 Repository name 为：( github 账户名称 ).github.io，例如我的是：< waheihahahaha.github.io >，否则打不开博客主页\n\n第三步：配置 SSH  \n生成秘钥：\n\n```\n $ ssh-keygen\n```\n打开文件：\n\n```\n $ cat ~/.ssh/id_rsa.pub\n```\n把内容 copy 下来，打开 github 点击右上角头像，点击 settings，点击 SSH ，添加。\n判断 SSH 是否配置成功：\n\n```javascript\n// An highlighted block\n $ ssh -T git@github.com\n```\n如果出现 `Hi! You've successfully authenticated, but GitHub\n does not provide shell access.`则配置成功。\n\n## 配置 Deployment\n打开创建的 folder，在 _config.yml 中进行如下配置：\n\n```\ndeploy:\n  type: git\n  repo: git@github.com:waheihahahaha/waheihahahaha.github.io.git  //waheihahahaha 为自己的账户名称\n  branch: master\n```\n\n执行命令：\n`hexo clean`，`hexo g`，`hexo d`\n接下来用浏览器访问：`\"用户名\".github.io`即可访问自己的博客\n\n# 撰写博客\n推荐 [CSDN-Markdown](https://mp.csdn.net/)编辑器，编辑好之后导出放到 sources ->_posts 内，重新执行命令：\n`hexo clean`，`hexo g`，`hexo d`\n\n","source":"_posts/ubuntu 系统下 github pages 个人博客搭建 -- hexo.md","raw":"---\ntitle: ubuntu 系统下 github pages 个人博客搭建 -- hexo\ndate: 2019-03-22 17:36:00\ncomments: true #是否可评论\ncategories: blog #分类\ntoc: true #是否显示文章目\ntags:   #标签\n\t- hexo\n\t- blog\n---\n\n\n\n用 hexo 搭建个人博客 \n<!-- more -->\n\n# 前言\n之前往 github 上提交过东西，自认为写的是个人博客，直到后来听他们说起 github pages ，才发现自己提交到了 repository ，出糗了，尴尬...\n\n\n不管是对于大牛还是对于新手，写博客都是个好习惯。大牛可以洋洋洒洒把一项技术描述的淋漓尽致，虽然我做不到那样，但可以把自己在学习中遇到的问题和解决的办法记录下来，一则积累经验，二则若能帮到其他网友那真是万幸，望能坚持，若指正错误必感激涕零。\n\n# 写作平台对比\n目前来说，我比较了解的博客平台：博客园、CSDN 和 github pages。\n\n其他平台，不甚了解，不妄加评论，以后补充。\n\n这三个平台，个人比较喜欢 CSDN 和 github pages 。博客园感觉界面有点 low ，虽然本人长相一般，但稍稍有点颜控，so...  丑拒。毕竟现在来说，哪个平台的功能都差不多，起码没有哪家能做到一家独大，看着心情舒畅比较重要嘛。\n\nCSDN 和 github pages 感觉都差不多，CSDN 的 SEO 做的好，在百度或者 Google 搜索时比较靠前，阅读量会比较高，从追求阅读量来说是一个不错的选择，广告多的有些过分，界面说不上好吧，不过比博客园强多了。gayhub ？哦不对，是 github ，百度是搜不着的，阅读量自然就 emm... ，不过是一个可以向全世界的程序猿展示自己的平台，逼格较高。相对而言，我还是较为喜欢 github 吧 。\n\n# 搭建准备\ngit 和 node.js 是必须的准备工作，也是入门必备，若是版本较高的 ubuntu 系统，可以使用较为简单的命令行安装，傻瓜式操作，不过一般给下载的都是最新版本，系统较老或者追求稳定版本的可以去官网自行下载解压安装。虽然听说最新版本使用不稳定，但目前来看好像并没有遇到过这种问题，用起来都一样。不过不要像我一样，命令行安装过 node，又从官网下载安装，结果导致当前管理员和超级用户使用的都不是一个版本，当前管理员安装了 node.js 和 npm ，超级用户只有 node.js 却没有 npm ，后来用的时候老报错误，还不明白怎么改，捣鼓了半天，只能卸载重新安装。\n\n温馨提醒，尽量不要在 root 权限下执行操作，容易搞蹦系统。\n##  git 介绍\n向自己的 github 上传文件，是需要一点 git 基础的，不懂也没有关系，只需要掌握一些基本操作命令就好了。\n\n可参考廖雪峰老师的 git  教程：[ git 基础学习](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/)\n\n## git 安装\n打开终端（ 桌面右键 open Terminal 或者 Ctrl + Alt + T ）\n\n输入 git ，查看系统是否已经安装   git\n\n```javascript\n// An highlighted block \n $ git\n```\n已安装，则跳过此步骤，若提示`The program 'git' is currently not installed. You can install it by typing:\nsudo apt-get install git`，则执行命令：\n\n```javascript\n// An highlighted block \n $ sudo apt-get install git\n```\n若系统版本较老，可先从Git官网下载源码：[ git 官网](https://git-scm.com/)\n解压后，依次执行命令：`./config`，`make`，`sudo make install`\n\n配置个人信息，设置user name 与 email\n\n```javascript\n// An highlighted block \n $ git config --global user.name \"github用户名\"\n $ git config --global user.email \"你注册的邮箱地址\"\n```\n\n## node.js 介绍\n可参考廖雪峰老师的 node.js 教程：[ node.js 基础学习 ](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143450141843488beddae2a1044cab5acb5125baf0882000)\n\n## node.js 安装\n打开终端（ 桌面右键 open Terminal 或者 Ctrl + Alt + T ）\n\n输入 node -v ，查看系统是否已经安装   node\n\n```javascript\n// An highlighted block \n $ node -v\n```\n已安装，则跳过此步骤；若未安装：\n\n法一：  apt-get 命令安装\n\n```javascript\n// An highlighted block \n  $ sudo apt-get install nodejs\n  $ sudo apt-get install npm\n```\n**法二**： *第一步*  下载 nodejs 包，node.js 官网下载安装：[ node.js 官网 ](https://nodejs.org/en/)\n\n或\n\n```javascript\n// An highlighted block \n $ wget https://nodejs.org/dist/v10.11.0/node-v10.11.0-linux-x64.tar.xz   //下载\n $ tar xf  node-v10.11.0-linux-x64.tar.xz       // 解压\n $ cd node-v10.11.0-linux-x64/                  // 进入解压目录\n $ ./bin/node -v                               // 执行node命令 查看版本\n```\n*第二步*   创建软连接，环境变量配置，当前管理员   与  超级用户下都可执行 npm 与 node \n\n```javascript\n// An highlighted block \n  $ ln -s  /home/root/node-v10.11.0-linux-x64/bin/node  /usr/local/bin/\n  $ ln -s /home/root/node-v10.11.0-linux-x64/bin/npm  /usr/local/bin/\n```\n注意：要写文件的绝对路径\n举例：我的电脑创建软连接的实际代码如下\n\n```\nsudo ln -s /home/wahahaha/.nvm/versions/node/v11.12.0/bin/node /usr/local/bin/\nsudo ln -s /home/wahahaha/.nvm/versions/node/v11.12.0/bin/npm /usr/local/bin/\n```\n电脑中 node 和 npm 的路径如下 ==>\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20190320202534963.png)\n\n查看是否安装到全局：`sudo node -v`，`sudo npm -v`\n\n# 博客框架搭建\n在框架搭建的时候，一般给推荐 jekyll 和 hexo 两种。刚开始还挺纠结，选择困难症这可咋办啊，就去网上看看他们各自的优缺点吧。结果发现全是捧 hexo 贬 jekyll 的，那感觉 jekyll 在 hexo 面前一文不值，根本不用纠结的好嘛，果断选择 hexo。也确实好用：依赖少，使用方便，色调较柔和，生成静态站点速度快 ... 当你完成本地博客的搭建，并成功用浏览器打开时，你已经离成功只有一步之遥了。\n\n\n## hexo 的介绍与安装\n\nhexo 是一个博客框架，拥有众多博客主题\n\n安装：\n\n\n```javascript\n// An highlighted block\n  $ npm install -g hexo-cli\n```\n开始建站：\n\n```javascript\n// An highlighted block\n $ hexo init <folder>\n $ cd <folder>\n $ npm install\n```\n\n<folder>  文件夹名称随意，初始化 Hexo 。\n生成静态文件命令：`hexo generate`\n启动服务器命令：`hexo server`\n\n现在，Hexo 本地博客已经搭建好了，可以用浏览器打开网址：[ http://localhost:4000/](http://localhost:4000/)  进行预览。\n\n# 将本地博客部署到 github\n\n首先，需要注册一个 github  的账号，就像注册一个 QQ 号那样简单，不过由于网页是纯英文的，对于英文不太好的伙伴看起来可能有点费力，不过并不难。然后，需要创建一个你自己的仓库 repositories，且仓库名必须是用户名后面加上`.github.io`，否则不会被识别。\n远程连接服务器时，需要 SSH 协议将本地与远程连接服务器时，需要 SSH 协议将本地与远程服务器进行连接，生成的两个文件一个为公钥(id_rsa)一个为私钥(id_rsa.pub)，我们需要把公钥配置到 github 的 SSH 上，当我们与远程连接时，公钥会与私钥相匹配。Deployment 配置是为了 hexo 命令能与用户的 github 对接。\n## 账号注册及SSH配置\n第一步： github 账号注册，地址：[https://github.com/](https://github.com/)\n\n第二步：注册登录后，创建一个新的repositories，且 Repository name 为：( github 账户名称 ).github.io，例如我的是：< waheihahahaha.github.io >，否则打不开博客主页\n\n第三步：配置 SSH  \n生成秘钥：\n\n```\n $ ssh-keygen\n```\n打开文件：\n\n```\n $ cat ~/.ssh/id_rsa.pub\n```\n把内容 copy 下来，打开 github 点击右上角头像，点击 settings，点击 SSH ，添加。\n判断 SSH 是否配置成功：\n\n```javascript\n// An highlighted block\n $ ssh -T git@github.com\n```\n如果出现 `Hi! You've successfully authenticated, but GitHub\n does not provide shell access.`则配置成功。\n\n## 配置 Deployment\n打开创建的 folder，在 _config.yml 中进行如下配置：\n\n```\ndeploy:\n  type: git\n  repo: git@github.com:waheihahahaha/waheihahahaha.github.io.git  //waheihahahaha 为自己的账户名称\n  branch: master\n```\n\n执行命令：\n`hexo clean`，`hexo g`，`hexo d`\n接下来用浏览器访问：`\"用户名\".github.io`即可访问自己的博客\n\n# 撰写博客\n推荐 [CSDN-Markdown](https://mp.csdn.net/)编辑器，编辑好之后导出放到 sources ->_posts 内，重新执行命令：\n`hexo clean`，`hexo g`，`hexo d`\n\n","slug":"ubuntu 系统下 github pages 个人博客搭建 -- hexo","published":1,"updated":"2019-04-05T03:34:31.263Z","layout":"post","photos":[],"link":"","_id":"cjufall3d00016tt03vqkt7mq","content":"<p>用 hexo 搭建个人博客<br><a id=\"more\"></a></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前往 github 上提交过东西，自认为写的是个人博客，直到后来听他们说起 github pages ，才发现自己提交到了 repository ，出糗了，尴尬…</p>\n<p>不管是对于大牛还是对于新手，写博客都是个好习惯。大牛可以洋洋洒洒把一项技术描述的淋漓尽致，虽然我做不到那样，但可以把自己在学习中遇到的问题和解决的办法记录下来，一则积累经验，二则若能帮到其他网友那真是万幸，望能坚持，若指正错误必感激涕零。</p>\n<h1 id=\"写作平台对比\"><a href=\"#写作平台对比\" class=\"headerlink\" title=\"写作平台对比\"></a>写作平台对比</h1><p>目前来说，我比较了解的博客平台：博客园、CSDN 和 github pages。</p>\n<p>其他平台，不甚了解，不妄加评论，以后补充。</p>\n<p>这三个平台，个人比较喜欢 CSDN 和 github pages 。博客园感觉界面有点 low ，虽然本人长相一般，但稍稍有点颜控，so…  丑拒。毕竟现在来说，哪个平台的功能都差不多，起码没有哪家能做到一家独大，看着心情舒畅比较重要嘛。</p>\n<p>CSDN 和 github pages 感觉都差不多，CSDN 的 SEO 做的好，在百度或者 Google 搜索时比较靠前，阅读量会比较高，从追求阅读量来说是一个不错的选择，广告多的有些过分，界面说不上好吧，不过比博客园强多了。gayhub ？哦不对，是 github ，百度是搜不着的，阅读量自然就 emm… ，不过是一个可以向全世界的程序猿展示自己的平台，逼格较高。相对而言，我还是较为喜欢 github 吧 。</p>\n<h1 id=\"搭建准备\"><a href=\"#搭建准备\" class=\"headerlink\" title=\"搭建准备\"></a>搭建准备</h1><p>git 和 node.js 是必须的准备工作，也是入门必备，若是版本较高的 ubuntu 系统，可以使用较为简单的命令行安装，傻瓜式操作，不过一般给下载的都是最新版本，系统较老或者追求稳定版本的可以去官网自行下载解压安装。虽然听说最新版本使用不稳定，但目前来看好像并没有遇到过这种问题，用起来都一样。不过不要像我一样，命令行安装过 node，又从官网下载安装，结果导致当前管理员和超级用户使用的都不是一个版本，当前管理员安装了 node.js 和 npm ，超级用户只有 node.js 却没有 npm ，后来用的时候老报错误，还不明白怎么改，捣鼓了半天，只能卸载重新安装。</p>\n<p>温馨提醒，尽量不要在 root 权限下执行操作，容易搞蹦系统。</p>\n<h2 id=\"git-介绍\"><a href=\"#git-介绍\" class=\"headerlink\" title=\"git 介绍\"></a>git 介绍</h2><p>向自己的 github 上传文件，是需要一点 git 基础的，不懂也没有关系，只需要掌握一些基本操作命令就好了。</p>\n<p>可参考廖雪峰老师的 git  教程：<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/\" target=\"_blank\" rel=\"noopener\"> git 基础学习</a></p>\n<h2 id=\"git-安装\"><a href=\"#git-安装\" class=\"headerlink\" title=\"git 安装\"></a>git 安装</h2><p>打开终端（ 桌面右键 open Terminal 或者 Ctrl + Alt + T ）</p>\n<p>输入 git ，查看系统是否已经安装   git</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block </span></span><br><span class=\"line\"> $ git</span><br></pre></td></tr></table></figure>\n<p>已安装，则跳过此步骤，若提示<code>The program &#39;git&#39; is currently not installed. You can install it by typing:\nsudo apt-get install git</code>，则执行命令：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block </span></span><br><span class=\"line\"> $ sudo apt-<span class=\"keyword\">get</span> install git</span><br></pre></td></tr></table></figure>\n<p>若系统版本较老，可先从Git官网下载源码：<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\"> git 官网</a><br>解压后，依次执行命令：<code>./config</code>，<code>make</code>，<code>sudo make install</code></p>\n<p>配置个人信息，设置user name 与 email</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block </span></span><br><span class=\"line\"> $ git config --global user.name <span class=\"string\">\"github用户名\"</span></span><br><span class=\"line\"> $ git config --global user.email <span class=\"string\">\"你注册的邮箱地址\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"node-js-介绍\"><a href=\"#node-js-介绍\" class=\"headerlink\" title=\"node.js 介绍\"></a>node.js 介绍</h2><p>可参考廖雪峰老师的 node.js 教程：<a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143450141843488beddae2a1044cab5acb5125baf0882000\" target=\"_blank\" rel=\"noopener\"> node.js 基础学习 </a></p>\n<h2 id=\"node-js-安装\"><a href=\"#node-js-安装\" class=\"headerlink\" title=\"node.js 安装\"></a>node.js 安装</h2><p>打开终端（ 桌面右键 open Terminal 或者 Ctrl + Alt + T ）</p>\n<p>输入 node -v ，查看系统是否已经安装   node</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block </span></span><br><span class=\"line\"> $ node -v</span><br></pre></td></tr></table></figure>\n<p>已安装，则跳过此步骤；若未安装：</p>\n<p>法一：  apt-get 命令安装</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block </span></span><br><span class=\"line\">  $ sudo apt-<span class=\"keyword\">get</span> install nodejs</span><br><span class=\"line\">  $ sudo apt-<span class=\"keyword\">get</span> install npm</span><br></pre></td></tr></table></figure>\n<p><strong>法二</strong>： <em>第一步</em>  下载 nodejs 包，node.js 官网下载安装：<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\"> node.js 官网 </a></p>\n<p>或</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block </span></span><br><span class=\"line\"> $ wget https:<span class=\"comment\">//nodejs.org/dist/v10.11.0/node-v10.11.0-linux-x64.tar.xz   //下载</span></span><br><span class=\"line\"> $ tar xf  node-v10<span class=\"number\">.11</span><span class=\"number\">.0</span>-linux-x64.tar.xz       <span class=\"comment\">// 解压</span></span><br><span class=\"line\"> $ cd node-v10<span class=\"number\">.11</span><span class=\"number\">.0</span>-linux-x64/                  <span class=\"comment\">// 进入解压目录</span></span><br><span class=\"line\"> $ ./bin/node -v                               <span class=\"comment\">// 执行node命令 查看版本</span></span><br></pre></td></tr></table></figure>\n<p><em>第二步</em>   创建软连接，环境变量配置，当前管理员   与  超级用户下都可执行 npm 与 node </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block </span></span><br><span class=\"line\">  $ ln -s  /home/root/node-v10<span class=\"number\">.11</span><span class=\"number\">.0</span>-linux-x64/bin/node  /usr/local/bin/</span><br><span class=\"line\">  $ ln -s /home/root/node-v10<span class=\"number\">.11</span><span class=\"number\">.0</span>-linux-x64/bin/npm  /usr/local/bin/</span><br></pre></td></tr></table></figure>\n<p>注意：要写文件的绝对路径<br>举例：我的电脑创建软连接的实际代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /home/wahahaha/.nvm/versions/node/v11.12.0/bin/node /usr/local/bin/</span><br><span class=\"line\">sudo ln -s /home/wahahaha/.nvm/versions/node/v11.12.0/bin/npm /usr/local/bin/</span><br></pre></td></tr></table></figure>\n<p>电脑中 node 和 npm 的路径如下 ==&gt;<br><img src=\"https://img-blog.csdnimg.cn/20190320202534963.png\" alt=\"在这里插入图片描述\"></p>\n<p>查看是否安装到全局：<code>sudo node -v</code>，<code>sudo npm -v</code></p>\n<h1 id=\"博客框架搭建\"><a href=\"#博客框架搭建\" class=\"headerlink\" title=\"博客框架搭建\"></a>博客框架搭建</h1><p>在框架搭建的时候，一般给推荐 jekyll 和 hexo 两种。刚开始还挺纠结，选择困难症这可咋办啊，就去网上看看他们各自的优缺点吧。结果发现全是捧 hexo 贬 jekyll 的，那感觉 jekyll 在 hexo 面前一文不值，根本不用纠结的好嘛，果断选择 hexo。也确实好用：依赖少，使用方便，色调较柔和，生成静态站点速度快 … 当你完成本地博客的搭建，并成功用浏览器打开时，你已经离成功只有一步之遥了。</p>\n<h2 id=\"hexo-的介绍与安装\"><a href=\"#hexo-的介绍与安装\" class=\"headerlink\" title=\"hexo 的介绍与安装\"></a>hexo 的介绍与安装</h2><p>hexo 是一个博客框架，拥有众多博客主题</p>\n<p>安装：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block</span></span><br><span class=\"line\">  $ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>开始建站：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block</span></span><br><span class=\"line\"> $ hexo init &lt;folder&gt;</span><br><span class=\"line\"> $ cd &lt;folder&gt;</span><br><span class=\"line\"> $ npm install</span><br></pre></td></tr></table></figure>\n<p><folder>  文件夹名称随意，初始化 Hexo 。<br>生成静态文件命令：<code>hexo generate</code><br>启动服务器命令：<code>hexo server</code></folder></p>\n<p>现在，Hexo 本地博客已经搭建好了，可以用浏览器打开网址：<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\"> http://localhost:4000/</a>  进行预览。</p>\n<h1 id=\"将本地博客部署到-github\"><a href=\"#将本地博客部署到-github\" class=\"headerlink\" title=\"将本地博客部署到 github\"></a>将本地博客部署到 github</h1><p>首先，需要注册一个 github  的账号，就像注册一个 QQ 号那样简单，不过由于网页是纯英文的，对于英文不太好的伙伴看起来可能有点费力，不过并不难。然后，需要创建一个你自己的仓库 repositories，且仓库名必须是用户名后面加上<code>.github.io</code>，否则不会被识别。<br>远程连接服务器时，需要 SSH 协议将本地与远程连接服务器时，需要 SSH 协议将本地与远程服务器进行连接，生成的两个文件一个为公钥(id_rsa)一个为私钥(id_rsa.pub)，我们需要把公钥配置到 github 的 SSH 上，当我们与远程连接时，公钥会与私钥相匹配。Deployment 配置是为了 hexo 命令能与用户的 github 对接。</p>\n<h2 id=\"账号注册及SSH配置\"><a href=\"#账号注册及SSH配置\" class=\"headerlink\" title=\"账号注册及SSH配置\"></a>账号注册及SSH配置</h2><p>第一步： github 账号注册，地址：<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">https://github.com/</a></p>\n<p>第二步：注册登录后，创建一个新的repositories，且 Repository name 为：( github 账户名称 ).github.io，例如我的是：&lt; waheihahahaha.github.io &gt;，否则打不开博客主页</p>\n<p>第三步：配置 SSH<br>生成秘钥：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen</span><br></pre></td></tr></table></figure>\n<p>打开文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<p>把内容 copy 下来，打开 github 点击右上角头像，点击 settings，点击 SSH ，添加。<br>判断 SSH 是否配置成功：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block</span></span><br><span class=\"line\"> $ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>如果出现 <code>Hi! You&#39;ve successfully authenticated, but GitHub\n does not provide shell access.</code>则配置成功。</p>\n<h2 id=\"配置-Deployment\"><a href=\"#配置-Deployment\" class=\"headerlink\" title=\"配置 Deployment\"></a>配置 Deployment</h2><p>打开创建的 folder，在 _config.yml 中进行如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:waheihahahaha/waheihahahaha.github.io.git  //waheihahahaha 为自己的账户名称</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>执行命令：<br><code>hexo clean</code>，<code>hexo g</code>，<code>hexo d</code><br>接下来用浏览器访问：<code>&quot;用户名&quot;.github.io</code>即可访问自己的博客</p>\n<h1 id=\"撰写博客\"><a href=\"#撰写博客\" class=\"headerlink\" title=\"撰写博客\"></a>撰写博客</h1><p>推荐 <a href=\"https://mp.csdn.net/\" target=\"_blank\" rel=\"noopener\">CSDN-Markdown</a>编辑器，编辑好之后导出放到 sources -&gt;_posts 内，重新执行命令：<br><code>hexo clean</code>，<code>hexo g</code>，<code>hexo d</code></p>\n","site":{"data":{}},"excerpt":"<p>用 hexo 搭建个人博客<br>","more":"</p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前往 github 上提交过东西，自认为写的是个人博客，直到后来听他们说起 github pages ，才发现自己提交到了 repository ，出糗了，尴尬…</p>\n<p>不管是对于大牛还是对于新手，写博客都是个好习惯。大牛可以洋洋洒洒把一项技术描述的淋漓尽致，虽然我做不到那样，但可以把自己在学习中遇到的问题和解决的办法记录下来，一则积累经验，二则若能帮到其他网友那真是万幸，望能坚持，若指正错误必感激涕零。</p>\n<h1 id=\"写作平台对比\"><a href=\"#写作平台对比\" class=\"headerlink\" title=\"写作平台对比\"></a>写作平台对比</h1><p>目前来说，我比较了解的博客平台：博客园、CSDN 和 github pages。</p>\n<p>其他平台，不甚了解，不妄加评论，以后补充。</p>\n<p>这三个平台，个人比较喜欢 CSDN 和 github pages 。博客园感觉界面有点 low ，虽然本人长相一般，但稍稍有点颜控，so…  丑拒。毕竟现在来说，哪个平台的功能都差不多，起码没有哪家能做到一家独大，看着心情舒畅比较重要嘛。</p>\n<p>CSDN 和 github pages 感觉都差不多，CSDN 的 SEO 做的好，在百度或者 Google 搜索时比较靠前，阅读量会比较高，从追求阅读量来说是一个不错的选择，广告多的有些过分，界面说不上好吧，不过比博客园强多了。gayhub ？哦不对，是 github ，百度是搜不着的，阅读量自然就 emm… ，不过是一个可以向全世界的程序猿展示自己的平台，逼格较高。相对而言，我还是较为喜欢 github 吧 。</p>\n<h1 id=\"搭建准备\"><a href=\"#搭建准备\" class=\"headerlink\" title=\"搭建准备\"></a>搭建准备</h1><p>git 和 node.js 是必须的准备工作，也是入门必备，若是版本较高的 ubuntu 系统，可以使用较为简单的命令行安装，傻瓜式操作，不过一般给下载的都是最新版本，系统较老或者追求稳定版本的可以去官网自行下载解压安装。虽然听说最新版本使用不稳定，但目前来看好像并没有遇到过这种问题，用起来都一样。不过不要像我一样，命令行安装过 node，又从官网下载安装，结果导致当前管理员和超级用户使用的都不是一个版本，当前管理员安装了 node.js 和 npm ，超级用户只有 node.js 却没有 npm ，后来用的时候老报错误，还不明白怎么改，捣鼓了半天，只能卸载重新安装。</p>\n<p>温馨提醒，尽量不要在 root 权限下执行操作，容易搞蹦系统。</p>\n<h2 id=\"git-介绍\"><a href=\"#git-介绍\" class=\"headerlink\" title=\"git 介绍\"></a>git 介绍</h2><p>向自己的 github 上传文件，是需要一点 git 基础的，不懂也没有关系，只需要掌握一些基本操作命令就好了。</p>\n<p>可参考廖雪峰老师的 git  教程：<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/\" target=\"_blank\" rel=\"noopener\"> git 基础学习</a></p>\n<h2 id=\"git-安装\"><a href=\"#git-安装\" class=\"headerlink\" title=\"git 安装\"></a>git 安装</h2><p>打开终端（ 桌面右键 open Terminal 或者 Ctrl + Alt + T ）</p>\n<p>输入 git ，查看系统是否已经安装   git</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block </span></span><br><span class=\"line\"> $ git</span><br></pre></td></tr></table></figure>\n<p>已安装，则跳过此步骤，若提示<code>The program &#39;git&#39; is currently not installed. You can install it by typing:\nsudo apt-get install git</code>，则执行命令：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block </span></span><br><span class=\"line\"> $ sudo apt-<span class=\"keyword\">get</span> install git</span><br></pre></td></tr></table></figure>\n<p>若系统版本较老，可先从Git官网下载源码：<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\"> git 官网</a><br>解压后，依次执行命令：<code>./config</code>，<code>make</code>，<code>sudo make install</code></p>\n<p>配置个人信息，设置user name 与 email</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block </span></span><br><span class=\"line\"> $ git config --global user.name <span class=\"string\">\"github用户名\"</span></span><br><span class=\"line\"> $ git config --global user.email <span class=\"string\">\"你注册的邮箱地址\"</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"node-js-介绍\"><a href=\"#node-js-介绍\" class=\"headerlink\" title=\"node.js 介绍\"></a>node.js 介绍</h2><p>可参考廖雪峰老师的 node.js 教程：<a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/00143450141843488beddae2a1044cab5acb5125baf0882000\" target=\"_blank\" rel=\"noopener\"> node.js 基础学习 </a></p>\n<h2 id=\"node-js-安装\"><a href=\"#node-js-安装\" class=\"headerlink\" title=\"node.js 安装\"></a>node.js 安装</h2><p>打开终端（ 桌面右键 open Terminal 或者 Ctrl + Alt + T ）</p>\n<p>输入 node -v ，查看系统是否已经安装   node</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block </span></span><br><span class=\"line\"> $ node -v</span><br></pre></td></tr></table></figure>\n<p>已安装，则跳过此步骤；若未安装：</p>\n<p>法一：  apt-get 命令安装</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block </span></span><br><span class=\"line\">  $ sudo apt-<span class=\"keyword\">get</span> install nodejs</span><br><span class=\"line\">  $ sudo apt-<span class=\"keyword\">get</span> install npm</span><br></pre></td></tr></table></figure>\n<p><strong>法二</strong>： <em>第一步</em>  下载 nodejs 包，node.js 官网下载安装：<a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noopener\"> node.js 官网 </a></p>\n<p>或</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block </span></span><br><span class=\"line\"> $ wget https:<span class=\"comment\">//nodejs.org/dist/v10.11.0/node-v10.11.0-linux-x64.tar.xz   //下载</span></span><br><span class=\"line\"> $ tar xf  node-v10<span class=\"number\">.11</span><span class=\"number\">.0</span>-linux-x64.tar.xz       <span class=\"comment\">// 解压</span></span><br><span class=\"line\"> $ cd node-v10<span class=\"number\">.11</span><span class=\"number\">.0</span>-linux-x64/                  <span class=\"comment\">// 进入解压目录</span></span><br><span class=\"line\"> $ ./bin/node -v                               <span class=\"comment\">// 执行node命令 查看版本</span></span><br></pre></td></tr></table></figure>\n<p><em>第二步</em>   创建软连接，环境变量配置，当前管理员   与  超级用户下都可执行 npm 与 node </p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block </span></span><br><span class=\"line\">  $ ln -s  /home/root/node-v10<span class=\"number\">.11</span><span class=\"number\">.0</span>-linux-x64/bin/node  /usr/local/bin/</span><br><span class=\"line\">  $ ln -s /home/root/node-v10<span class=\"number\">.11</span><span class=\"number\">.0</span>-linux-x64/bin/npm  /usr/local/bin/</span><br></pre></td></tr></table></figure>\n<p>注意：要写文件的绝对路径<br>举例：我的电脑创建软连接的实际代码如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /home/wahahaha/.nvm/versions/node/v11.12.0/bin/node /usr/local/bin/</span><br><span class=\"line\">sudo ln -s /home/wahahaha/.nvm/versions/node/v11.12.0/bin/npm /usr/local/bin/</span><br></pre></td></tr></table></figure>\n<p>电脑中 node 和 npm 的路径如下 ==&gt;<br><img src=\"https://img-blog.csdnimg.cn/20190320202534963.png\" alt=\"在这里插入图片描述\"></p>\n<p>查看是否安装到全局：<code>sudo node -v</code>，<code>sudo npm -v</code></p>\n<h1 id=\"博客框架搭建\"><a href=\"#博客框架搭建\" class=\"headerlink\" title=\"博客框架搭建\"></a>博客框架搭建</h1><p>在框架搭建的时候，一般给推荐 jekyll 和 hexo 两种。刚开始还挺纠结，选择困难症这可咋办啊，就去网上看看他们各自的优缺点吧。结果发现全是捧 hexo 贬 jekyll 的，那感觉 jekyll 在 hexo 面前一文不值，根本不用纠结的好嘛，果断选择 hexo。也确实好用：依赖少，使用方便，色调较柔和，生成静态站点速度快 … 当你完成本地博客的搭建，并成功用浏览器打开时，你已经离成功只有一步之遥了。</p>\n<h2 id=\"hexo-的介绍与安装\"><a href=\"#hexo-的介绍与安装\" class=\"headerlink\" title=\"hexo 的介绍与安装\"></a>hexo 的介绍与安装</h2><p>hexo 是一个博客框架，拥有众多博客主题</p>\n<p>安装：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block</span></span><br><span class=\"line\">  $ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n<p>开始建站：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block</span></span><br><span class=\"line\"> $ hexo init &lt;folder&gt;</span><br><span class=\"line\"> $ cd &lt;folder&gt;</span><br><span class=\"line\"> $ npm install</span><br></pre></td></tr></table></figure>\n<p><folder>  文件夹名称随意，初始化 Hexo 。<br>生成静态文件命令：<code>hexo generate</code><br>启动服务器命令：<code>hexo server</code></folder></p>\n<p>现在，Hexo 本地博客已经搭建好了，可以用浏览器打开网址：<a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\"> http://localhost:4000/</a>  进行预览。</p>\n<h1 id=\"将本地博客部署到-github\"><a href=\"#将本地博客部署到-github\" class=\"headerlink\" title=\"将本地博客部署到 github\"></a>将本地博客部署到 github</h1><p>首先，需要注册一个 github  的账号，就像注册一个 QQ 号那样简单，不过由于网页是纯英文的，对于英文不太好的伙伴看起来可能有点费力，不过并不难。然后，需要创建一个你自己的仓库 repositories，且仓库名必须是用户名后面加上<code>.github.io</code>，否则不会被识别。<br>远程连接服务器时，需要 SSH 协议将本地与远程连接服务器时，需要 SSH 协议将本地与远程服务器进行连接，生成的两个文件一个为公钥(id_rsa)一个为私钥(id_rsa.pub)，我们需要把公钥配置到 github 的 SSH 上，当我们与远程连接时，公钥会与私钥相匹配。Deployment 配置是为了 hexo 命令能与用户的 github 对接。</p>\n<h2 id=\"账号注册及SSH配置\"><a href=\"#账号注册及SSH配置\" class=\"headerlink\" title=\"账号注册及SSH配置\"></a>账号注册及SSH配置</h2><p>第一步： github 账号注册，地址：<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">https://github.com/</a></p>\n<p>第二步：注册登录后，创建一个新的repositories，且 Repository name 为：( github 账户名称 ).github.io，例如我的是：&lt; waheihahahaha.github.io &gt;，否则打不开博客主页</p>\n<p>第三步：配置 SSH<br>生成秘钥：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen</span><br></pre></td></tr></table></figure>\n<p>打开文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure>\n<p>把内容 copy 下来，打开 github 点击右上角头像，点击 settings，点击 SSH ，添加。<br>判断 SSH 是否配置成功：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block</span></span><br><span class=\"line\"> $ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>如果出现 <code>Hi! You&#39;ve successfully authenticated, but GitHub\n does not provide shell access.</code>则配置成功。</p>\n<h2 id=\"配置-Deployment\"><a href=\"#配置-Deployment\" class=\"headerlink\" title=\"配置 Deployment\"></a>配置 Deployment</h2><p>打开创建的 folder，在 _config.yml 中进行如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:waheihahahaha/waheihahahaha.github.io.git  //waheihahahaha 为自己的账户名称</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<p>执行命令：<br><code>hexo clean</code>，<code>hexo g</code>，<code>hexo d</code><br>接下来用浏览器访问：<code>&quot;用户名&quot;.github.io</code>即可访问自己的博客</p>\n<h1 id=\"撰写博客\"><a href=\"#撰写博客\" class=\"headerlink\" title=\"撰写博客\"></a>撰写博客</h1><p>推荐 <a href=\"https://mp.csdn.net/\" target=\"_blank\" rel=\"noopener\">CSDN-Markdown</a>编辑器，编辑好之后导出放到 sources -&gt;_posts 内，重新执行命令：<br><code>hexo clean</code>，<code>hexo g</code>，<code>hexo d</code></p>"},{"title":"使用 github pages 和 hexo 搭建个人博客","date":"2019-03-27T09:34:18.000Z","comments":1,"toc":true,"_content":"\n- - - An Elegant Static Blog Generator\n<!-- more -->\n\n# 摘要\n\nAn elegant static blog generator 意为一个简洁的静态博客生成器，目的是为博客创作者提供便利。\n\n这个静态博客生成器主要由两部分构成：github pages 和 hexo。Github pages 是供用户实现托管服务的一个静态网站，hexo 则是一个简洁、高效的博客框架。\n\n今天我们的目的就是`使用 github pages 和 hexo 搭建用户自己的个人博客`，以下配置均在 `ubuntu` 系统下进行。\n\n# 前言\n之前往 github 上提交过东西，自认为写的是个人博客，直到后来听他们说起 github pages ，才发现自己只是提交到了新的仓库（repository）里面 ，出糗了，尴尬...\n\n\n> 我们为什么要写博客呢？\n\n写博客的好处有很多，打个比方，我们需要学习一项新的技术，在学习的过程中可能会遇到很多的坑，我们可以记录填坑经历或者写一篇技术总结，一是为了让自己更加熟练，二则可以帮助后来者少走一些弯路，再则有可能许久不用，一年半载后忘却了这项技术，我们可以通过这篇博客把忘记的快速捡起来。\n\n写博客是个好习惯，不管对于大牛来说还是对于一个新手。大牛可以洋洋洒洒把一项技术描述的淋漓尽致，虽然我做不到那样，但可以把自己在学习中遇到的问题和解决的办法记录下来，一则积累经验，二则若能帮到其他网友那真是万幸，望能坚持。\n\n> 那么，我们为什么要用 github pages 和 hexo 搭建个人博客呢？\n\n目前来说，我比较了解的博客平台：博客园、CSDN 和 github pages 。至于其他平台，不甚了解，不妄加评论，以后补充。这三个平台来讲，我认为 github pages 是比其他两个平台要好的多的 。\n\n博客园 和 CSDN 的 SEO 做的不错，在百度搜索或者 Google 时排名比较靠前，阅读量相对来说会比较高。但是博客园的界面做的实在不怎么样，毕竟现在来说，每个平台的功能都差不多，起码没有哪家能够做到一家独大，看着心情舒畅还是比较重要的。CSDN 的界面比博客园强不了多少，而且广告多的有些过分，周围各种广告弹窗骚扰，实在谈不上是好的体验。而 github 在这方面做的就好的多，界面简洁无广告，并且面向的是全世界的程序猿，可以更好的展示自己， `github pages 明显是一个好的选择。`\n\n我们在写博客之后，需要有一个转换器，把我们写的东西编译成一个 web 界面用于显示。目前比较流行的编译器有 jekyll 和 hexo，github pages 官方推荐的是 jekyll ，但是 jekyll 本身使用 ruby 写的，需要有 ruby 基础，而 hexo 是用 js 写的，编译速度也会比 jekyll 快一些。如果你了解或者想了解 ruby，那么就用 jekyll ，我自己不用 ruby，想做一些修改的话会很麻烦，还不如换一种比价熟悉的，学过一些 js，虽然不太熟练，但比 ruby 好一些。所以，`我选择用 github pages 和 hexo 来搭建个人博客。`\n\n\n# 搭建准备\n \n下面说一下需要做的准备工作 -----\n （一）git 的下载与安装\n （二）node 与 hexo 的下载安装\n （三）github 账号注册及 SSH 配置\n\n## （一）git 的下载与安装\n\n***为什么要安装 git***\n\n> gitHub 是一个面向开源及私有软件项目的托管平台，因为只支持 git 作为唯一的版本库格式进行托管，故名 gitHub。-----（来自百度百科）\n\n也就是说，我们的本地文件需要上传到 github 时，是需要用到 git 的，我们进行代码的拉取或是上传都需要 git 的支持。git 对于 github 来说是必须的准备工作，乃入门必备，我们需要下载安装 git ，还需要一点 git 基础，需要掌握一些基本的操作命令。\n\n可参考廖雪峰老师的 git  教程：[ git 基础学习](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/)\n\n***git 安装*** \n\n若是版本较高的 ubuntu 系统，可以直接使用命令行安装，操作简单，下载的都是最新版本。若系统版本较老，可自行从Git官网下载源码：[ git 官网](https://git-scm.com/) 进行安装，这边不做介绍。\n\n打开终端（ 桌面右键 open Terminal 或者 Ctrl + Alt + T ）\n\n输入 git ，查看系统是否已经安装   git\n\n```javascript\n// An highlighted block \n $ git  // 查看是否进行过 git 安装\n```\n若显示版本，则已安装，跳过此步骤，若提示`The program 'git' is currently not installed. You can install it by typing: sudo apt-get install git`，则执行命令：\n\n```javascript\n// An highlighted block \n $ sudo apt-get install git  //安装 git\n```\n\n>释义：\n> sudo 是 linux 系统的管理指令，允许普通用户执行一些 root 命令的工具； \n> apt-get 是一条 linux 指令，适用于 deb 包管理式的操作系统，需要 root 权限，所以一般跟着 sudo 命令； \n> 温馨提醒，不要在 root 权限下执行操作，容易搞蹦系统。\n\n***git 个人信息配置***\n\n设置user name 与 email\n\n```javascript\n// An highlighted block \n $ git config --global user.name \"用户名\"  // 配置用户名\n $ git config --global user.email \"邮箱地址\"  // 配置邮箱\n```\n\n## （二）node.js 、npm 与 hexo 的下载安装\n\n***为什么要安装 node.js 、npm与 hexo***\n\nhexo 前面我们提到过，是一个简洁的博客框架，我们需要下载安装 hexo 。但是，hexo 的安装是基于 node.js 的，在下载 hexo 之前，我们需要先下载安装 node.js  。npm 则是 node.js 的包管理工具，我们在进行开发时，如果需要用到别人封装好的包，可以直接通过 npm 下载安装，还会把我们需要使用的所有依赖的包进行下载管理，比程序员手动管理要好的多，简单又不容易出错。\n\n如果想进一步了解可参考 廖雪峰老师的教程：[ node.js 基础学习 ](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434501245426ad4b91f2b880464ba876a8e3043fc8ef000)  或 hexo 文档：[ hexo](https://hexo.io/zh-cn/docs/)\n\n***node.js 与 npm 安装***\n\n这边同 git ，可以直接使用命令行进行安装，操作简单，若是系统版本较老，可自行从 node.js 官网下载稳定版本：[ node.js 官网](https://nodejs.org/zh-cn/) 进行安装，这边不做介绍。\n\n打开终端（ 桌面右键 open Terminal 或者 Ctrl + Alt + T ）\n\n输入 `node -v` 和 `npm -v`，查看系统是否已经安装   node.js 和 npm 。\n```javascript\n// An highlighted block \n $ node -v  // 查看 node 版本\n $ npm -v   // 查看 npm 版本\n```\n\n若显示版本，则已安装，跳过此步骤；若未安装，则可以使用 curl 安装：\n\n> 释义：\n> curl 命令可以直接获得到指向的页面，\n> 如果这个 URL 指向的是文件或是图片，直接下载到本地\n\n1. 安装 curl\n\n```javascript\n$ sudo apt-get install curl\n```\n\n2. 安装 node.js 和 npm\nnpm 会在 node.js 安装的时候顺带安装\n\n```JavaScript\n$  curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\n$  sudo apt-get install -y nodejs  \n```\n3. 查看安装版本\n\n```javascript\n $ node -v  // 查看 node 版本\n $ npm -v   // 查看 npm 版本\n```\n4. 查看是否安装到全局\n```javascript\n $ sudo node -v  // 查看 node 版本\n $ sudo npm -v   // 查看 npm 版本\n```\n\n***hexo 安装***\n\nhexo 是一个快速、简洁且高效的博客框架，使用命令安装：\n\n```javascript\n// An highlighted block\n  $ npm install -g hexo-cli  // hexo 安装\n```\n查看是否安装成功\n```javascript\n// An highlighted block\n  $ hexo -v  // 查看 hexo 是否安装成功，显示版本，则安装成功\n```\n\n***hexo 建站***\n\nhexo 建站是指使用 hexo 在本地成功搭建博客，当你完成本地博客的搭建，并成功用浏览器打开，那么离成功只有一步之遥了。\n\n首先新建一个文件夹（文件夹必须是空的），\n打开终端（ 桌面右键 open Terminal 或者 Ctrl + Alt + T ），\n开始建站：\n\n```javascript\n// An highlighted block\n $ cd <folder>  // 进入当前文件夹，folder 为新建文件夹的文件名，可为任意值\n $ hexo init  // 初始化当前文件夹，会在文件下生成所需文件\n $ npm install  // 安装配置文件\n```\n现在，Hexo 本地博客已经搭建好了，用浏览器打开网址进行预览，依次执行：\n\n```javascript\n $  hexo clean   // 清除缓存文件和已生成的静态文件\n $  hexo g       // 即 hexo generate，生成静态文件\n $  hexo s       // 即 hexo server，启动服务器，默认访问网址为：http：//localhost:4000/\n```\n访问网址：`http://localhost:4000/` 即可看到自动生成的博客 `hello world`\n\n## （三）github 账号注册及 SSH 配置\n\n首先，需要注册一个 github  的账号，就像注册一个 QQ 号那样简单，不过由于网页是纯英文的，对于英文不太好的伙伴看起来可能有点费力，不过并不难。然后，需要创建一个你自己的仓库 repositories，且仓库名必须是用户名后面加上`.github.io`，否则不会被识别，这也就是个人博客的仓库。\n远程连接服务器时，需要 SSH 协议将本地与远程连接服务器时，需要 SSH 协议将本地与远程服务器进行连接，生成的两个文件一个为公钥(id_rsa)一个为私钥(id_rsa.pub)，我们需要把公钥配置到 github 的 SSH 上，当我们与远程连接时，公钥会与私钥相匹配。\n\n***账号注册***\n\n github 账号注册，地址：[https://github.com/](https://github.com/)\n\n***博客仓库建立***\n\n注册登录后，创建一个新的repositories，且 Repository name 为：( github 账户名称 ).github.io，例如我的是：< waheihahahaha.github.io >，也即博客主页。\n\n ***SSH  配置***\n \n打开终端，生成秘钥：\n```javascript\n $ ssh-keygen  // 生成秘钥\n```\n\n打开公钥文件，并把公钥配置到 github 上：\n```javascript\n $ cat ~/.ssh/id_rsa.pub  // 打开公钥文件\n```\n把内容复制下来，打开 github 点击右上角头像，点击 settings，点击 SSH ，添加。\n\n判断 SSH 是否配置成功：\n\n```javascript\n// An highlighted block\n $ ssh -T git@github.com\n```\n如果出现 `Hi! You've successfully authenticated, but GitHub\n does not provide shell access.`则配置成功。\n\n# 把本地博客上传到 github 仓库\n\n本地博客上传到 github 仓库，必须建立他们之间的联系，需要更改站点配置文件，即文件根目录下面的 _config.yml文件。最后即可把本地文件通过 hexo 进行上传，把预先生成静态文件部署到 github 。\n\n***配置 Deployment***\n\nDeployment 配置是为了 hexo 命令能与用户的 github 对接。\n打开创建的 folder，打开文件 _config.yml ，对 deploy 进行如下配置：\n\n```\ndeploy:\n  type: git\n  repo: git@github.com:waheihahahaha/waheihahahaha.github.io.git  //waheihahahaha 为自己的账户名称\n  branch: master\n```\n\n> 注：repo 行 的 waheihahahaha 为自己的账户名称，自行更改\n\n***文件部署到 github***\n\n在终端，依次执行命令：\n\n```javascript\n $  hexo clean   // 清除缓存文件和已生成的静态文件\n $  hexo g       // 即 hexo generate，生成静态文件 （public 文件）\n $  hexo d       // 即 hexo deploy，部署网站，把本地上一步生成的静态文件部署到 github\n```\n\n接下来用浏览器访问：`\"用户名\".github.io`即可访问自己的博客\n\n# 撰写博客\n推荐 [CSDN-Markdown](https://mp.csdn.net/)编辑器，编辑好之后导出放到 sources ->_posts 内，重新执行命令：\n`hexo clean`，`hexo g`，`hexo d`\n即可把编写好的内容部署到 github\n\n\n\n\n\n","source":"_posts/使用 github pages 和 hexo 搭建个人博客 .md","raw":"---\ntitle: 使用 github pages 和 hexo 搭建个人博客\ndate: 2019-03-27 17:34:18\ncomments: true #是否可评论\ncategories: blog #分类\ntoc: true #是否显示文章目\ntags:   #标签\n\t- hexo\n\t- blog\n---\n\n- - - An Elegant Static Blog Generator\n<!-- more -->\n\n# 摘要\n\nAn elegant static blog generator 意为一个简洁的静态博客生成器，目的是为博客创作者提供便利。\n\n这个静态博客生成器主要由两部分构成：github pages 和 hexo。Github pages 是供用户实现托管服务的一个静态网站，hexo 则是一个简洁、高效的博客框架。\n\n今天我们的目的就是`使用 github pages 和 hexo 搭建用户自己的个人博客`，以下配置均在 `ubuntu` 系统下进行。\n\n# 前言\n之前往 github 上提交过东西，自认为写的是个人博客，直到后来听他们说起 github pages ，才发现自己只是提交到了新的仓库（repository）里面 ，出糗了，尴尬...\n\n\n> 我们为什么要写博客呢？\n\n写博客的好处有很多，打个比方，我们需要学习一项新的技术，在学习的过程中可能会遇到很多的坑，我们可以记录填坑经历或者写一篇技术总结，一是为了让自己更加熟练，二则可以帮助后来者少走一些弯路，再则有可能许久不用，一年半载后忘却了这项技术，我们可以通过这篇博客把忘记的快速捡起来。\n\n写博客是个好习惯，不管对于大牛来说还是对于一个新手。大牛可以洋洋洒洒把一项技术描述的淋漓尽致，虽然我做不到那样，但可以把自己在学习中遇到的问题和解决的办法记录下来，一则积累经验，二则若能帮到其他网友那真是万幸，望能坚持。\n\n> 那么，我们为什么要用 github pages 和 hexo 搭建个人博客呢？\n\n目前来说，我比较了解的博客平台：博客园、CSDN 和 github pages 。至于其他平台，不甚了解，不妄加评论，以后补充。这三个平台来讲，我认为 github pages 是比其他两个平台要好的多的 。\n\n博客园 和 CSDN 的 SEO 做的不错，在百度搜索或者 Google 时排名比较靠前，阅读量相对来说会比较高。但是博客园的界面做的实在不怎么样，毕竟现在来说，每个平台的功能都差不多，起码没有哪家能够做到一家独大，看着心情舒畅还是比较重要的。CSDN 的界面比博客园强不了多少，而且广告多的有些过分，周围各种广告弹窗骚扰，实在谈不上是好的体验。而 github 在这方面做的就好的多，界面简洁无广告，并且面向的是全世界的程序猿，可以更好的展示自己， `github pages 明显是一个好的选择。`\n\n我们在写博客之后，需要有一个转换器，把我们写的东西编译成一个 web 界面用于显示。目前比较流行的编译器有 jekyll 和 hexo，github pages 官方推荐的是 jekyll ，但是 jekyll 本身使用 ruby 写的，需要有 ruby 基础，而 hexo 是用 js 写的，编译速度也会比 jekyll 快一些。如果你了解或者想了解 ruby，那么就用 jekyll ，我自己不用 ruby，想做一些修改的话会很麻烦，还不如换一种比价熟悉的，学过一些 js，虽然不太熟练，但比 ruby 好一些。所以，`我选择用 github pages 和 hexo 来搭建个人博客。`\n\n\n# 搭建准备\n \n下面说一下需要做的准备工作 -----\n （一）git 的下载与安装\n （二）node 与 hexo 的下载安装\n （三）github 账号注册及 SSH 配置\n\n## （一）git 的下载与安装\n\n***为什么要安装 git***\n\n> gitHub 是一个面向开源及私有软件项目的托管平台，因为只支持 git 作为唯一的版本库格式进行托管，故名 gitHub。-----（来自百度百科）\n\n也就是说，我们的本地文件需要上传到 github 时，是需要用到 git 的，我们进行代码的拉取或是上传都需要 git 的支持。git 对于 github 来说是必须的准备工作，乃入门必备，我们需要下载安装 git ，还需要一点 git 基础，需要掌握一些基本的操作命令。\n\n可参考廖雪峰老师的 git  教程：[ git 基础学习](https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/)\n\n***git 安装*** \n\n若是版本较高的 ubuntu 系统，可以直接使用命令行安装，操作简单，下载的都是最新版本。若系统版本较老，可自行从Git官网下载源码：[ git 官网](https://git-scm.com/) 进行安装，这边不做介绍。\n\n打开终端（ 桌面右键 open Terminal 或者 Ctrl + Alt + T ）\n\n输入 git ，查看系统是否已经安装   git\n\n```javascript\n// An highlighted block \n $ git  // 查看是否进行过 git 安装\n```\n若显示版本，则已安装，跳过此步骤，若提示`The program 'git' is currently not installed. You can install it by typing: sudo apt-get install git`，则执行命令：\n\n```javascript\n// An highlighted block \n $ sudo apt-get install git  //安装 git\n```\n\n>释义：\n> sudo 是 linux 系统的管理指令，允许普通用户执行一些 root 命令的工具； \n> apt-get 是一条 linux 指令，适用于 deb 包管理式的操作系统，需要 root 权限，所以一般跟着 sudo 命令； \n> 温馨提醒，不要在 root 权限下执行操作，容易搞蹦系统。\n\n***git 个人信息配置***\n\n设置user name 与 email\n\n```javascript\n// An highlighted block \n $ git config --global user.name \"用户名\"  // 配置用户名\n $ git config --global user.email \"邮箱地址\"  // 配置邮箱\n```\n\n## （二）node.js 、npm 与 hexo 的下载安装\n\n***为什么要安装 node.js 、npm与 hexo***\n\nhexo 前面我们提到过，是一个简洁的博客框架，我们需要下载安装 hexo 。但是，hexo 的安装是基于 node.js 的，在下载 hexo 之前，我们需要先下载安装 node.js  。npm 则是 node.js 的包管理工具，我们在进行开发时，如果需要用到别人封装好的包，可以直接通过 npm 下载安装，还会把我们需要使用的所有依赖的包进行下载管理，比程序员手动管理要好的多，简单又不容易出错。\n\n如果想进一步了解可参考 廖雪峰老师的教程：[ node.js 基础学习 ](https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434501245426ad4b91f2b880464ba876a8e3043fc8ef000)  或 hexo 文档：[ hexo](https://hexo.io/zh-cn/docs/)\n\n***node.js 与 npm 安装***\n\n这边同 git ，可以直接使用命令行进行安装，操作简单，若是系统版本较老，可自行从 node.js 官网下载稳定版本：[ node.js 官网](https://nodejs.org/zh-cn/) 进行安装，这边不做介绍。\n\n打开终端（ 桌面右键 open Terminal 或者 Ctrl + Alt + T ）\n\n输入 `node -v` 和 `npm -v`，查看系统是否已经安装   node.js 和 npm 。\n```javascript\n// An highlighted block \n $ node -v  // 查看 node 版本\n $ npm -v   // 查看 npm 版本\n```\n\n若显示版本，则已安装，跳过此步骤；若未安装，则可以使用 curl 安装：\n\n> 释义：\n> curl 命令可以直接获得到指向的页面，\n> 如果这个 URL 指向的是文件或是图片，直接下载到本地\n\n1. 安装 curl\n\n```javascript\n$ sudo apt-get install curl\n```\n\n2. 安装 node.js 和 npm\nnpm 会在 node.js 安装的时候顺带安装\n\n```JavaScript\n$  curl -sL https://deb.nodesource.com/setup_8.x | sudo -E bash -\n$  sudo apt-get install -y nodejs  \n```\n3. 查看安装版本\n\n```javascript\n $ node -v  // 查看 node 版本\n $ npm -v   // 查看 npm 版本\n```\n4. 查看是否安装到全局\n```javascript\n $ sudo node -v  // 查看 node 版本\n $ sudo npm -v   // 查看 npm 版本\n```\n\n***hexo 安装***\n\nhexo 是一个快速、简洁且高效的博客框架，使用命令安装：\n\n```javascript\n// An highlighted block\n  $ npm install -g hexo-cli  // hexo 安装\n```\n查看是否安装成功\n```javascript\n// An highlighted block\n  $ hexo -v  // 查看 hexo 是否安装成功，显示版本，则安装成功\n```\n\n***hexo 建站***\n\nhexo 建站是指使用 hexo 在本地成功搭建博客，当你完成本地博客的搭建，并成功用浏览器打开，那么离成功只有一步之遥了。\n\n首先新建一个文件夹（文件夹必须是空的），\n打开终端（ 桌面右键 open Terminal 或者 Ctrl + Alt + T ），\n开始建站：\n\n```javascript\n// An highlighted block\n $ cd <folder>  // 进入当前文件夹，folder 为新建文件夹的文件名，可为任意值\n $ hexo init  // 初始化当前文件夹，会在文件下生成所需文件\n $ npm install  // 安装配置文件\n```\n现在，Hexo 本地博客已经搭建好了，用浏览器打开网址进行预览，依次执行：\n\n```javascript\n $  hexo clean   // 清除缓存文件和已生成的静态文件\n $  hexo g       // 即 hexo generate，生成静态文件\n $  hexo s       // 即 hexo server，启动服务器，默认访问网址为：http：//localhost:4000/\n```\n访问网址：`http://localhost:4000/` 即可看到自动生成的博客 `hello world`\n\n## （三）github 账号注册及 SSH 配置\n\n首先，需要注册一个 github  的账号，就像注册一个 QQ 号那样简单，不过由于网页是纯英文的，对于英文不太好的伙伴看起来可能有点费力，不过并不难。然后，需要创建一个你自己的仓库 repositories，且仓库名必须是用户名后面加上`.github.io`，否则不会被识别，这也就是个人博客的仓库。\n远程连接服务器时，需要 SSH 协议将本地与远程连接服务器时，需要 SSH 协议将本地与远程服务器进行连接，生成的两个文件一个为公钥(id_rsa)一个为私钥(id_rsa.pub)，我们需要把公钥配置到 github 的 SSH 上，当我们与远程连接时，公钥会与私钥相匹配。\n\n***账号注册***\n\n github 账号注册，地址：[https://github.com/](https://github.com/)\n\n***博客仓库建立***\n\n注册登录后，创建一个新的repositories，且 Repository name 为：( github 账户名称 ).github.io，例如我的是：< waheihahahaha.github.io >，也即博客主页。\n\n ***SSH  配置***\n \n打开终端，生成秘钥：\n```javascript\n $ ssh-keygen  // 生成秘钥\n```\n\n打开公钥文件，并把公钥配置到 github 上：\n```javascript\n $ cat ~/.ssh/id_rsa.pub  // 打开公钥文件\n```\n把内容复制下来，打开 github 点击右上角头像，点击 settings，点击 SSH ，添加。\n\n判断 SSH 是否配置成功：\n\n```javascript\n// An highlighted block\n $ ssh -T git@github.com\n```\n如果出现 `Hi! You've successfully authenticated, but GitHub\n does not provide shell access.`则配置成功。\n\n# 把本地博客上传到 github 仓库\n\n本地博客上传到 github 仓库，必须建立他们之间的联系，需要更改站点配置文件，即文件根目录下面的 _config.yml文件。最后即可把本地文件通过 hexo 进行上传，把预先生成静态文件部署到 github 。\n\n***配置 Deployment***\n\nDeployment 配置是为了 hexo 命令能与用户的 github 对接。\n打开创建的 folder，打开文件 _config.yml ，对 deploy 进行如下配置：\n\n```\ndeploy:\n  type: git\n  repo: git@github.com:waheihahahaha/waheihahahaha.github.io.git  //waheihahahaha 为自己的账户名称\n  branch: master\n```\n\n> 注：repo 行 的 waheihahahaha 为自己的账户名称，自行更改\n\n***文件部署到 github***\n\n在终端，依次执行命令：\n\n```javascript\n $  hexo clean   // 清除缓存文件和已生成的静态文件\n $  hexo g       // 即 hexo generate，生成静态文件 （public 文件）\n $  hexo d       // 即 hexo deploy，部署网站，把本地上一步生成的静态文件部署到 github\n```\n\n接下来用浏览器访问：`\"用户名\".github.io`即可访问自己的博客\n\n# 撰写博客\n推荐 [CSDN-Markdown](https://mp.csdn.net/)编辑器，编辑好之后导出放到 sources ->_posts 内，重新执行命令：\n`hexo clean`，`hexo g`，`hexo d`\n即可把编写好的内容部署到 github\n\n\n\n\n\n","slug":"使用 github pages 和 hexo 搭建个人博客 ","published":1,"updated":"2019-04-13T09:22:31.395Z","layout":"post","photos":[],"link":"","_id":"cjufall3h00036tt09eo1709n","content":"<ul>\n<li><ul>\n<li><ul>\n<li>An Elegant Static Blog Generator<a id=\"more\"></a>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>An elegant static blog generator 意为一个简洁的静态博客生成器，目的是为博客创作者提供便利。</p>\n<p>这个静态博客生成器主要由两部分构成：github pages 和 hexo。Github pages 是供用户实现托管服务的一个静态网站，hexo 则是一个简洁、高效的博客框架。</p>\n<p>今天我们的目的就是<code>使用 github pages 和 hexo 搭建用户自己的个人博客</code>，以下配置均在 <code>ubuntu</code> 系统下进行。</p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前往 github 上提交过东西，自认为写的是个人博客，直到后来听他们说起 github pages ，才发现自己只是提交到了新的仓库（repository）里面 ，出糗了，尴尬…</p>\n<blockquote>\n<p>我们为什么要写博客呢？</p>\n</blockquote>\n<p>写博客的好处有很多，打个比方，我们需要学习一项新的技术，在学习的过程中可能会遇到很多的坑，我们可以记录填坑经历或者写一篇技术总结，一是为了让自己更加熟练，二则可以帮助后来者少走一些弯路，再则有可能许久不用，一年半载后忘却了这项技术，我们可以通过这篇博客把忘记的快速捡起来。</p>\n<p>写博客是个好习惯，不管对于大牛来说还是对于一个新手。大牛可以洋洋洒洒把一项技术描述的淋漓尽致，虽然我做不到那样，但可以把自己在学习中遇到的问题和解决的办法记录下来，一则积累经验，二则若能帮到其他网友那真是万幸，望能坚持。</p>\n<blockquote>\n<p>那么，我们为什么要用 github pages 和 hexo 搭建个人博客呢？</p>\n</blockquote>\n<p>目前来说，我比较了解的博客平台：博客园、CSDN 和 github pages 。至于其他平台，不甚了解，不妄加评论，以后补充。这三个平台来讲，我认为 github pages 是比其他两个平台要好的多的 。</p>\n<p>博客园 和 CSDN 的 SEO 做的不错，在百度搜索或者 Google 时排名比较靠前，阅读量相对来说会比较高。但是博客园的界面做的实在不怎么样，毕竟现在来说，每个平台的功能都差不多，起码没有哪家能够做到一家独大，看着心情舒畅还是比较重要的。CSDN 的界面比博客园强不了多少，而且广告多的有些过分，周围各种广告弹窗骚扰，实在谈不上是好的体验。而 github 在这方面做的就好的多，界面简洁无广告，并且面向的是全世界的程序猿，可以更好的展示自己， <code>github pages 明显是一个好的选择。</code></p>\n<p>我们在写博客之后，需要有一个转换器，把我们写的东西编译成一个 web 界面用于显示。目前比较流行的编译器有 jekyll 和 hexo，github pages 官方推荐的是 jekyll ，但是 jekyll 本身使用 ruby 写的，需要有 ruby 基础，而 hexo 是用 js 写的，编译速度也会比 jekyll 快一些。如果你了解或者想了解 ruby，那么就用 jekyll ，我自己不用 ruby，想做一些修改的话会很麻烦，还不如换一种比价熟悉的，学过一些 js，虽然不太熟练，但比 ruby 好一些。所以，<code>我选择用 github pages 和 hexo 来搭建个人博客。</code></p>\n<h1 id=\"搭建准备\"><a href=\"#搭建准备\" class=\"headerlink\" title=\"搭建准备\"></a>搭建准备</h1><p>下面说一下需要做的准备工作 —–<br> （一）git 的下载与安装<br> （二）node 与 hexo 的下载安装<br> （三）github 账号注册及 SSH 配置</p>\n<h2 id=\"（一）git-的下载与安装\"><a href=\"#（一）git-的下载与安装\" class=\"headerlink\" title=\"（一）git 的下载与安装\"></a>（一）git 的下载与安装</h2><p><strong><em>为什么要安装 git</em></strong></p>\n<blockquote>\n<p>gitHub 是一个面向开源及私有软件项目的托管平台，因为只支持 git 作为唯一的版本库格式进行托管，故名 gitHub。—–（来自百度百科）</p>\n</blockquote>\n<p>也就是说，我们的本地文件需要上传到 github 时，是需要用到 git 的，我们进行代码的拉取或是上传都需要 git 的支持。git 对于 github 来说是必须的准备工作，乃入门必备，我们需要下载安装 git ，还需要一点 git 基础，需要掌握一些基本的操作命令。</p>\n<p>可参考廖雪峰老师的 git  教程：<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/\" target=\"_blank\" rel=\"noopener\"> git 基础学习</a></p>\n<p><strong><em>git 安装</em></strong> </p>\n<p>若是版本较高的 ubuntu 系统，可以直接使用命令行安装，操作简单，下载的都是最新版本。若系统版本较老，可自行从Git官网下载源码：<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\"> git 官网</a> 进行安装，这边不做介绍。</p>\n<p>打开终端（ 桌面右键 open Terminal 或者 Ctrl + Alt + T ）</p>\n<p>输入 git ，查看系统是否已经安装   git</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block </span></span><br><span class=\"line\"> $ git  <span class=\"comment\">// 查看是否进行过 git 安装</span></span><br></pre></td></tr></table></figure>\n<p>若显示版本，则已安装，跳过此步骤，若提示<code>The program &#39;git&#39; is currently not installed. You can install it by typing: sudo apt-get install git</code>，则执行命令：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block </span></span><br><span class=\"line\"> $ sudo apt-<span class=\"keyword\">get</span> install git  //安装 git</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>释义：<br>sudo 是 linux 系统的管理指令，允许普通用户执行一些 root 命令的工具；<br>apt-get 是一条 linux 指令，适用于 deb 包管理式的操作系统，需要 root 权限，所以一般跟着 sudo 命令；<br>温馨提醒，不要在 root 权限下执行操作，容易搞蹦系统。</p>\n</blockquote>\n<p><strong><em>git 个人信息配置</em></strong></p>\n<p>设置user name 与 email</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block </span></span><br><span class=\"line\"> $ git config --global user.name <span class=\"string\">\"用户名\"</span>  <span class=\"comment\">// 配置用户名</span></span><br><span class=\"line\"> $ git config --global user.email <span class=\"string\">\"邮箱地址\"</span>  <span class=\"comment\">// 配置邮箱</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"（二）node-js-、npm-与-hexo-的下载安装\"><a href=\"#（二）node-js-、npm-与-hexo-的下载安装\" class=\"headerlink\" title=\"（二）node.js 、npm 与 hexo 的下载安装\"></a>（二）node.js 、npm 与 hexo 的下载安装</h2><p><strong><em>为什么要安装 node.js 、npm与 hexo</em></strong></p>\n<p>hexo 前面我们提到过，是一个简洁的博客框架，我们需要下载安装 hexo 。但是，hexo 的安装是基于 node.js 的，在下载 hexo 之前，我们需要先下载安装 node.js  。npm 则是 node.js 的包管理工具，我们在进行开发时，如果需要用到别人封装好的包，可以直接通过 npm 下载安装，还会把我们需要使用的所有依赖的包进行下载管理，比程序员手动管理要好的多，简单又不容易出错。</p>\n<p>如果想进一步了解可参考 廖雪峰老师的教程：<a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434501245426ad4b91f2b880464ba876a8e3043fc8ef000\" target=\"_blank\" rel=\"noopener\"> node.js 基础学习 </a>  或 hexo 文档：<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\"> hexo</a></p>\n<p><strong><em>node.js 与 npm 安装</em></strong></p>\n<p>这边同 git ，可以直接使用命令行进行安装，操作简单，若是系统版本较老，可自行从 node.js 官网下载稳定版本：<a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\"> node.js 官网</a> 进行安装，这边不做介绍。</p>\n<p>打开终端（ 桌面右键 open Terminal 或者 Ctrl + Alt + T ）</p>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code>，查看系统是否已经安装   node.js 和 npm 。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block </span></span><br><span class=\"line\"> $ node -v  <span class=\"comment\">// 查看 node 版本</span></span><br><span class=\"line\"> $ npm -v   <span class=\"comment\">// 查看 npm 版本</span></span><br></pre></td></tr></table></figure></p>\n<p>若显示版本，则已安装，跳过此步骤；若未安装，则可以使用 curl 安装：</p>\n<blockquote>\n<p>释义：<br>curl 命令可以直接获得到指向的页面，<br>如果这个 URL 指向的是文件或是图片，直接下载到本地</p>\n</blockquote>\n<ol>\n<li>安装 curl</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-<span class=\"keyword\">get</span> install curl</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>安装 node.js 和 npm<br>npm 会在 node.js 安装的时候顺带安装</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  curl -sL https:<span class=\"comment\">//deb.nodesource.com/setup_8.x | sudo -E bash -</span></span><br><span class=\"line\">$  sudo apt-<span class=\"keyword\">get</span> install -y nodejs</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>查看安装版本</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v  <span class=\"comment\">// 查看 node 版本</span></span><br><span class=\"line\">$ npm -v   <span class=\"comment\">// 查看 npm 版本</span></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>查看是否安装到全局<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo node -v  <span class=\"comment\">// 查看 node 版本</span></span><br><span class=\"line\">$ sudo npm -v   <span class=\"comment\">// 查看 npm 版本</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong><em>hexo 安装</em></strong></p>\n<p>hexo 是一个快速、简洁且高效的博客框架，使用命令安装：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block</span></span><br><span class=\"line\">  $ npm install -g hexo-cli  <span class=\"comment\">// hexo 安装</span></span><br></pre></td></tr></table></figure>\n<p>查看是否安装成功<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block</span></span><br><span class=\"line\">  $ hexo -v  <span class=\"comment\">// 查看 hexo 是否安装成功，显示版本，则安装成功</span></span><br></pre></td></tr></table></figure></p>\n<p><strong><em>hexo 建站</em></strong></p>\n<p>hexo 建站是指使用 hexo 在本地成功搭建博客，当你完成本地博客的搭建，并成功用浏览器打开，那么离成功只有一步之遥了。</p>\n<p>首先新建一个文件夹（文件夹必须是空的），<br>打开终端（ 桌面右键 open Terminal 或者 Ctrl + Alt + T ），<br>开始建站：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block</span></span><br><span class=\"line\"> $ cd &lt;folder&gt;  <span class=\"comment\">// 进入当前文件夹，folder 为新建文件夹的文件名，可为任意值</span></span><br><span class=\"line\"> $ hexo init  <span class=\"comment\">// 初始化当前文件夹，会在文件下生成所需文件</span></span><br><span class=\"line\"> $ npm install  <span class=\"comment\">// 安装配置文件</span></span><br></pre></td></tr></table></figure>\n<p>现在，Hexo 本地博客已经搭建好了，用浏览器打开网址进行预览，依次执行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  hexo clean   <span class=\"comment\">// 清除缓存文件和已生成的静态文件</span></span><br><span class=\"line\">$  hexo g       <span class=\"comment\">// 即 hexo generate，生成静态文件</span></span><br><span class=\"line\">$  hexo s       <span class=\"comment\">// 即 hexo server，启动服务器，默认访问网址为：http：//localhost:4000/</span></span><br></pre></td></tr></table></figure>\n<p>访问网址：<code>http://localhost:4000/</code> 即可看到自动生成的博客 <code>hello world</code></p>\n<h2 id=\"（三）github-账号注册及-SSH-配置\"><a href=\"#（三）github-账号注册及-SSH-配置\" class=\"headerlink\" title=\"（三）github 账号注册及 SSH 配置\"></a>（三）github 账号注册及 SSH 配置</h2><p>首先，需要注册一个 github  的账号，就像注册一个 QQ 号那样简单，不过由于网页是纯英文的，对于英文不太好的伙伴看起来可能有点费力，不过并不难。然后，需要创建一个你自己的仓库 repositories，且仓库名必须是用户名后面加上<code>.github.io</code>，否则不会被识别，这也就是个人博客的仓库。<br>远程连接服务器时，需要 SSH 协议将本地与远程连接服务器时，需要 SSH 协议将本地与远程服务器进行连接，生成的两个文件一个为公钥(id_rsa)一个为私钥(id_rsa.pub)，我们需要把公钥配置到 github 的 SSH 上，当我们与远程连接时，公钥会与私钥相匹配。</p>\n<p><strong><em>账号注册</em></strong></p>\n<p> github 账号注册，地址：<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">https://github.com/</a></p>\n<p><strong><em>博客仓库建立</em></strong></p>\n<p>注册登录后，创建一个新的repositories，且 Repository name 为：( github 账户名称 ).github.io，例如我的是：&lt; waheihahahaha.github.io &gt;，也即博客主页。</p>\n<p> <strong><em>SSH  配置</em></strong></p>\n<p>打开终端，生成秘钥：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen  <span class=\"comment\">// 生成秘钥</span></span><br></pre></td></tr></table></figure></p>\n<p>打开公钥文件，并把公钥配置到 github 上：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat ~<span class=\"regexp\">/.ssh/i</span>d_rsa.pub  <span class=\"comment\">// 打开公钥文件</span></span><br></pre></td></tr></table></figure></p>\n<p>把内容复制下来，打开 github 点击右上角头像，点击 settings，点击 SSH ，添加。</p>\n<p>判断 SSH 是否配置成功：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block</span></span><br><span class=\"line\"> $ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>如果出现 <code>Hi! You&#39;ve successfully authenticated, but GitHub\n does not provide shell access.</code>则配置成功。</p>\n<h1 id=\"把本地博客上传到-github-仓库\"><a href=\"#把本地博客上传到-github-仓库\" class=\"headerlink\" title=\"把本地博客上传到 github 仓库\"></a>把本地博客上传到 github 仓库</h1><p>本地博客上传到 github 仓库，必须建立他们之间的联系，需要更改站点配置文件，即文件根目录下面的 _config.yml文件。最后即可把本地文件通过 hexo 进行上传，把预先生成静态文件部署到 github 。</p>\n<p><strong><em>配置 Deployment</em></strong></p>\n<p>Deployment 配置是为了 hexo 命令能与用户的 github 对接。<br>打开创建的 folder，打开文件 _config.yml ，对 deploy 进行如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:waheihahahaha/waheihahahaha.github.io.git  //waheihahahaha 为自己的账户名称</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：repo 行 的 waheihahahaha 为自己的账户名称，自行更改</p>\n</blockquote>\n<p><strong><em>文件部署到 github</em></strong></p>\n<p>在终端，依次执行命令：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  hexo clean   <span class=\"comment\">// 清除缓存文件和已生成的静态文件</span></span><br><span class=\"line\">$  hexo g       <span class=\"comment\">// 即 hexo generate，生成静态文件 （public 文件）</span></span><br><span class=\"line\">$  hexo d       <span class=\"comment\">// 即 hexo deploy，部署网站，把本地上一步生成的静态文件部署到 github</span></span><br></pre></td></tr></table></figure>\n<p>接下来用浏览器访问：<code>&quot;用户名&quot;.github.io</code>即可访问自己的博客</p>\n<h1 id=\"撰写博客\"><a href=\"#撰写博客\" class=\"headerlink\" title=\"撰写博客\"></a>撰写博客</h1><p>推荐 <a href=\"https://mp.csdn.net/\" target=\"_blank\" rel=\"noopener\">CSDN-Markdown</a>编辑器，编辑好之后导出放到 sources -&gt;_posts 内，重新执行命令：<br><code>hexo clean</code>，<code>hexo g</code>，<code>hexo d</code><br>即可把编写好的内容部署到 github</p>\n","site":{"data":{}},"excerpt":"<ul>\n<li><ul>\n<li><ul>\n<li>An Elegant Static Blog Generator","more":"</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"摘要\"><a href=\"#摘要\" class=\"headerlink\" title=\"摘要\"></a>摘要</h1><p>An elegant static blog generator 意为一个简洁的静态博客生成器，目的是为博客创作者提供便利。</p>\n<p>这个静态博客生成器主要由两部分构成：github pages 和 hexo。Github pages 是供用户实现托管服务的一个静态网站，hexo 则是一个简洁、高效的博客框架。</p>\n<p>今天我们的目的就是<code>使用 github pages 和 hexo 搭建用户自己的个人博客</code>，以下配置均在 <code>ubuntu</code> 系统下进行。</p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>之前往 github 上提交过东西，自认为写的是个人博客，直到后来听他们说起 github pages ，才发现自己只是提交到了新的仓库（repository）里面 ，出糗了，尴尬…</p>\n<blockquote>\n<p>我们为什么要写博客呢？</p>\n</blockquote>\n<p>写博客的好处有很多，打个比方，我们需要学习一项新的技术，在学习的过程中可能会遇到很多的坑，我们可以记录填坑经历或者写一篇技术总结，一是为了让自己更加熟练，二则可以帮助后来者少走一些弯路，再则有可能许久不用，一年半载后忘却了这项技术，我们可以通过这篇博客把忘记的快速捡起来。</p>\n<p>写博客是个好习惯，不管对于大牛来说还是对于一个新手。大牛可以洋洋洒洒把一项技术描述的淋漓尽致，虽然我做不到那样，但可以把自己在学习中遇到的问题和解决的办法记录下来，一则积累经验，二则若能帮到其他网友那真是万幸，望能坚持。</p>\n<blockquote>\n<p>那么，我们为什么要用 github pages 和 hexo 搭建个人博客呢？</p>\n</blockquote>\n<p>目前来说，我比较了解的博客平台：博客园、CSDN 和 github pages 。至于其他平台，不甚了解，不妄加评论，以后补充。这三个平台来讲，我认为 github pages 是比其他两个平台要好的多的 。</p>\n<p>博客园 和 CSDN 的 SEO 做的不错，在百度搜索或者 Google 时排名比较靠前，阅读量相对来说会比较高。但是博客园的界面做的实在不怎么样，毕竟现在来说，每个平台的功能都差不多，起码没有哪家能够做到一家独大，看着心情舒畅还是比较重要的。CSDN 的界面比博客园强不了多少，而且广告多的有些过分，周围各种广告弹窗骚扰，实在谈不上是好的体验。而 github 在这方面做的就好的多，界面简洁无广告，并且面向的是全世界的程序猿，可以更好的展示自己， <code>github pages 明显是一个好的选择。</code></p>\n<p>我们在写博客之后，需要有一个转换器，把我们写的东西编译成一个 web 界面用于显示。目前比较流行的编译器有 jekyll 和 hexo，github pages 官方推荐的是 jekyll ，但是 jekyll 本身使用 ruby 写的，需要有 ruby 基础，而 hexo 是用 js 写的，编译速度也会比 jekyll 快一些。如果你了解或者想了解 ruby，那么就用 jekyll ，我自己不用 ruby，想做一些修改的话会很麻烦，还不如换一种比价熟悉的，学过一些 js，虽然不太熟练，但比 ruby 好一些。所以，<code>我选择用 github pages 和 hexo 来搭建个人博客。</code></p>\n<h1 id=\"搭建准备\"><a href=\"#搭建准备\" class=\"headerlink\" title=\"搭建准备\"></a>搭建准备</h1><p>下面说一下需要做的准备工作 —–<br> （一）git 的下载与安装<br> （二）node 与 hexo 的下载安装<br> （三）github 账号注册及 SSH 配置</p>\n<h2 id=\"（一）git-的下载与安装\"><a href=\"#（一）git-的下载与安装\" class=\"headerlink\" title=\"（一）git 的下载与安装\"></a>（一）git 的下载与安装</h2><p><strong><em>为什么要安装 git</em></strong></p>\n<blockquote>\n<p>gitHub 是一个面向开源及私有软件项目的托管平台，因为只支持 git 作为唯一的版本库格式进行托管，故名 gitHub。—–（来自百度百科）</p>\n</blockquote>\n<p>也就是说，我们的本地文件需要上传到 github 时，是需要用到 git 的，我们进行代码的拉取或是上传都需要 git 的支持。git 对于 github 来说是必须的准备工作，乃入门必备，我们需要下载安装 git ，还需要一点 git 基础，需要掌握一些基本的操作命令。</p>\n<p>可参考廖雪峰老师的 git  教程：<a href=\"https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/\" target=\"_blank\" rel=\"noopener\"> git 基础学习</a></p>\n<p><strong><em>git 安装</em></strong> </p>\n<p>若是版本较高的 ubuntu 系统，可以直接使用命令行安装，操作简单，下载的都是最新版本。若系统版本较老，可自行从Git官网下载源码：<a href=\"https://git-scm.com/\" target=\"_blank\" rel=\"noopener\"> git 官网</a> 进行安装，这边不做介绍。</p>\n<p>打开终端（ 桌面右键 open Terminal 或者 Ctrl + Alt + T ）</p>\n<p>输入 git ，查看系统是否已经安装   git</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block </span></span><br><span class=\"line\"> $ git  <span class=\"comment\">// 查看是否进行过 git 安装</span></span><br></pre></td></tr></table></figure>\n<p>若显示版本，则已安装，跳过此步骤，若提示<code>The program &#39;git&#39; is currently not installed. You can install it by typing: sudo apt-get install git</code>，则执行命令：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block </span></span><br><span class=\"line\"> $ sudo apt-<span class=\"keyword\">get</span> install git  //安装 git</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>释义：<br>sudo 是 linux 系统的管理指令，允许普通用户执行一些 root 命令的工具；<br>apt-get 是一条 linux 指令，适用于 deb 包管理式的操作系统，需要 root 权限，所以一般跟着 sudo 命令；<br>温馨提醒，不要在 root 权限下执行操作，容易搞蹦系统。</p>\n</blockquote>\n<p><strong><em>git 个人信息配置</em></strong></p>\n<p>设置user name 与 email</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block </span></span><br><span class=\"line\"> $ git config --global user.name <span class=\"string\">\"用户名\"</span>  <span class=\"comment\">// 配置用户名</span></span><br><span class=\"line\"> $ git config --global user.email <span class=\"string\">\"邮箱地址\"</span>  <span class=\"comment\">// 配置邮箱</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"（二）node-js-、npm-与-hexo-的下载安装\"><a href=\"#（二）node-js-、npm-与-hexo-的下载安装\" class=\"headerlink\" title=\"（二）node.js 、npm 与 hexo 的下载安装\"></a>（二）node.js 、npm 与 hexo 的下载安装</h2><p><strong><em>为什么要安装 node.js 、npm与 hexo</em></strong></p>\n<p>hexo 前面我们提到过，是一个简洁的博客框架，我们需要下载安装 hexo 。但是，hexo 的安装是基于 node.js 的，在下载 hexo 之前，我们需要先下载安装 node.js  。npm 则是 node.js 的包管理工具，我们在进行开发时，如果需要用到别人封装好的包，可以直接通过 npm 下载安装，还会把我们需要使用的所有依赖的包进行下载管理，比程序员手动管理要好的多，简单又不容易出错。</p>\n<p>如果想进一步了解可参考 廖雪峰老师的教程：<a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/001434501245426ad4b91f2b880464ba876a8e3043fc8ef000\" target=\"_blank\" rel=\"noopener\"> node.js 基础学习 </a>  或 hexo 文档：<a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\"> hexo</a></p>\n<p><strong><em>node.js 与 npm 安装</em></strong></p>\n<p>这边同 git ，可以直接使用命令行进行安装，操作简单，若是系统版本较老，可自行从 node.js 官网下载稳定版本：<a href=\"https://nodejs.org/zh-cn/\" target=\"_blank\" rel=\"noopener\"> node.js 官网</a> 进行安装，这边不做介绍。</p>\n<p>打开终端（ 桌面右键 open Terminal 或者 Ctrl + Alt + T ）</p>\n<p>输入 <code>node -v</code> 和 <code>npm -v</code>，查看系统是否已经安装   node.js 和 npm 。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block </span></span><br><span class=\"line\"> $ node -v  <span class=\"comment\">// 查看 node 版本</span></span><br><span class=\"line\"> $ npm -v   <span class=\"comment\">// 查看 npm 版本</span></span><br></pre></td></tr></table></figure></p>\n<p>若显示版本，则已安装，跳过此步骤；若未安装，则可以使用 curl 安装：</p>\n<blockquote>\n<p>释义：<br>curl 命令可以直接获得到指向的页面，<br>如果这个 URL 指向的是文件或是图片，直接下载到本地</p>\n</blockquote>\n<ol>\n<li>安装 curl</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo apt-<span class=\"keyword\">get</span> install curl</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>安装 node.js 和 npm<br>npm 会在 node.js 安装的时候顺带安装</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  curl -sL https:<span class=\"comment\">//deb.nodesource.com/setup_8.x | sudo -E bash -</span></span><br><span class=\"line\">$  sudo apt-<span class=\"keyword\">get</span> install -y nodejs</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>查看安装版本</li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ node -v  <span class=\"comment\">// 查看 node 版本</span></span><br><span class=\"line\">$ npm -v   <span class=\"comment\">// 查看 npm 版本</span></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>查看是否安装到全局<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sudo node -v  <span class=\"comment\">// 查看 node 版本</span></span><br><span class=\"line\">$ sudo npm -v   <span class=\"comment\">// 查看 npm 版本</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><strong><em>hexo 安装</em></strong></p>\n<p>hexo 是一个快速、简洁且高效的博客框架，使用命令安装：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block</span></span><br><span class=\"line\">  $ npm install -g hexo-cli  <span class=\"comment\">// hexo 安装</span></span><br></pre></td></tr></table></figure>\n<p>查看是否安装成功<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block</span></span><br><span class=\"line\">  $ hexo -v  <span class=\"comment\">// 查看 hexo 是否安装成功，显示版本，则安装成功</span></span><br></pre></td></tr></table></figure></p>\n<p><strong><em>hexo 建站</em></strong></p>\n<p>hexo 建站是指使用 hexo 在本地成功搭建博客，当你完成本地博客的搭建，并成功用浏览器打开，那么离成功只有一步之遥了。</p>\n<p>首先新建一个文件夹（文件夹必须是空的），<br>打开终端（ 桌面右键 open Terminal 或者 Ctrl + Alt + T ），<br>开始建站：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block</span></span><br><span class=\"line\"> $ cd &lt;folder&gt;  <span class=\"comment\">// 进入当前文件夹，folder 为新建文件夹的文件名，可为任意值</span></span><br><span class=\"line\"> $ hexo init  <span class=\"comment\">// 初始化当前文件夹，会在文件下生成所需文件</span></span><br><span class=\"line\"> $ npm install  <span class=\"comment\">// 安装配置文件</span></span><br></pre></td></tr></table></figure>\n<p>现在，Hexo 本地博客已经搭建好了，用浏览器打开网址进行预览，依次执行：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  hexo clean   <span class=\"comment\">// 清除缓存文件和已生成的静态文件</span></span><br><span class=\"line\">$  hexo g       <span class=\"comment\">// 即 hexo generate，生成静态文件</span></span><br><span class=\"line\">$  hexo s       <span class=\"comment\">// 即 hexo server，启动服务器，默认访问网址为：http：//localhost:4000/</span></span><br></pre></td></tr></table></figure>\n<p>访问网址：<code>http://localhost:4000/</code> 即可看到自动生成的博客 <code>hello world</code></p>\n<h2 id=\"（三）github-账号注册及-SSH-配置\"><a href=\"#（三）github-账号注册及-SSH-配置\" class=\"headerlink\" title=\"（三）github 账号注册及 SSH 配置\"></a>（三）github 账号注册及 SSH 配置</h2><p>首先，需要注册一个 github  的账号，就像注册一个 QQ 号那样简单，不过由于网页是纯英文的，对于英文不太好的伙伴看起来可能有点费力，不过并不难。然后，需要创建一个你自己的仓库 repositories，且仓库名必须是用户名后面加上<code>.github.io</code>，否则不会被识别，这也就是个人博客的仓库。<br>远程连接服务器时，需要 SSH 协议将本地与远程连接服务器时，需要 SSH 协议将本地与远程服务器进行连接，生成的两个文件一个为公钥(id_rsa)一个为私钥(id_rsa.pub)，我们需要把公钥配置到 github 的 SSH 上，当我们与远程连接时，公钥会与私钥相匹配。</p>\n<p><strong><em>账号注册</em></strong></p>\n<p> github 账号注册，地址：<a href=\"https://github.com/\" target=\"_blank\" rel=\"noopener\">https://github.com/</a></p>\n<p><strong><em>博客仓库建立</em></strong></p>\n<p>注册登录后，创建一个新的repositories，且 Repository name 为：( github 账户名称 ).github.io，例如我的是：&lt; waheihahahaha.github.io &gt;，也即博客主页。</p>\n<p> <strong><em>SSH  配置</em></strong></p>\n<p>打开终端，生成秘钥：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen  <span class=\"comment\">// 生成秘钥</span></span><br></pre></td></tr></table></figure></p>\n<p>打开公钥文件，并把公钥配置到 github 上：<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cat ~<span class=\"regexp\">/.ssh/i</span>d_rsa.pub  <span class=\"comment\">// 打开公钥文件</span></span><br></pre></td></tr></table></figure></p>\n<p>把内容复制下来，打开 github 点击右上角头像，点击 settings，点击 SSH ，添加。</p>\n<p>判断 SSH 是否配置成功：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// An highlighted block</span></span><br><span class=\"line\"> $ ssh -T git@github.com</span><br></pre></td></tr></table></figure>\n<p>如果出现 <code>Hi! You&#39;ve successfully authenticated, but GitHub\n does not provide shell access.</code>则配置成功。</p>\n<h1 id=\"把本地博客上传到-github-仓库\"><a href=\"#把本地博客上传到-github-仓库\" class=\"headerlink\" title=\"把本地博客上传到 github 仓库\"></a>把本地博客上传到 github 仓库</h1><p>本地博客上传到 github 仓库，必须建立他们之间的联系，需要更改站点配置文件，即文件根目录下面的 _config.yml文件。最后即可把本地文件通过 hexo 进行上传，把预先生成静态文件部署到 github 。</p>\n<p><strong><em>配置 Deployment</em></strong></p>\n<p>Deployment 配置是为了 hexo 命令能与用户的 github 对接。<br>打开创建的 folder，打开文件 _config.yml ，对 deploy 进行如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: git@github.com:waheihahahaha/waheihahahaha.github.io.git  //waheihahahaha 为自己的账户名称</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注：repo 行 的 waheihahahaha 为自己的账户名称，自行更改</p>\n</blockquote>\n<p><strong><em>文件部署到 github</em></strong></p>\n<p>在终端，依次执行命令：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  hexo clean   <span class=\"comment\">// 清除缓存文件和已生成的静态文件</span></span><br><span class=\"line\">$  hexo g       <span class=\"comment\">// 即 hexo generate，生成静态文件 （public 文件）</span></span><br><span class=\"line\">$  hexo d       <span class=\"comment\">// 即 hexo deploy，部署网站，把本地上一步生成的静态文件部署到 github</span></span><br></pre></td></tr></table></figure>\n<p>接下来用浏览器访问：<code>&quot;用户名&quot;.github.io</code>即可访问自己的博客</p>\n<h1 id=\"撰写博客\"><a href=\"#撰写博客\" class=\"headerlink\" title=\"撰写博客\"></a>撰写博客</h1><p>推荐 <a href=\"https://mp.csdn.net/\" target=\"_blank\" rel=\"noopener\">CSDN-Markdown</a>编辑器，编辑好之后导出放到 sources -&gt;_posts 内，重新执行命令：<br><code>hexo clean</code>，<code>hexo g</code>，<code>hexo d</code><br>即可把编写好的内容部署到 github</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjufall3d00016tt03vqkt7mq","category_id":"cjufall3i00046tt01nh9mxx5","_id":"cjufall3p00086tt0g45u8ag3"},{"post_id":"cjufall3h00036tt09eo1709n","category_id":"cjufall3i00046tt01nh9mxx5","_id":"cjufall3q000b6tt0mkdo3myy"}],"PostTag":[{"post_id":"cjufall3d00016tt03vqkt7mq","tag_id":"cjufall3k00056tt0kkq41rqm","_id":"cjufall3q000a6tt09b6zp79t"},{"post_id":"cjufall3d00016tt03vqkt7mq","tag_id":"cjufall3o00076tt0nmkp6100","_id":"cjufall3q000c6tt0s3ket426"},{"post_id":"cjufall3h00036tt09eo1709n","tag_id":"cjufall3k00056tt0kkq41rqm","_id":"cjufall3r000e6tt0wao4yosm"},{"post_id":"cjufall3h00036tt09eo1709n","tag_id":"cjufall3o00076tt0nmkp6100","_id":"cjufall3r000f6tt0yfl0tkh5"}],"Tag":[{"name":"hexo","_id":"cjufall3k00056tt0kkq41rqm"},{"name":"blog","_id":"cjufall3o00076tt0nmkp6100"}]}}